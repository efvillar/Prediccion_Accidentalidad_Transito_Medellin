# Modelo Semanal de Pueba
library(reshape)
#XY_Sem$ANO <- NULL
str(XY_Sem)
Data_sem <- cast(XY_Sem[,c(1,2,3,4)],ANO+SEMANA~GRAVEDAD, sum)
Data_sem$Total_Accidentes <- Data_sem$ACCIDENTES_GRAVES+Data_sem$ACCIDENTES_LEVES
Data_sem$ANO1 <- Data_sem$ANO
Data_sem$SEMANA1 <- Data_sem$SEMANA
library(dplyr)
Data_sem<-unite_(Data_sem, "Ano_Sem", c("ANO1","SEMANA1"))
XY_Sem$ANO1 <- XY_Sem$ANO
XY_Sem$SEMANA1 <- XY_Sem$SEMANA
XY_Sem<-unite_(XY_Sem, "Ano_Sem", c("ANO1","SEMANA1"))
View(XY_Sem)
library(sqldf)
Data_sem1 <- sqldf("SELECT *
FROM Data_sem
INNER JOIN XY_Sem USING(Ano_Sem)")
View(Data_sem1)
library(sqldf)
Data_sem1 <- sqldf("SELECT *
FROM Data_sem
OUTER JOIN XY_Sem USING(Ano_Sem)")
Data_sem1 <- sqldf("SELECT *
FROM Data_sem
LEFT JOIN XY_Sem USING(Ano_Sem)")
XY_Sem1 <- XY_Sem
XY_Sem1$FREQ<-NULL
XY_Sem1$GRAVEDAD<-NULL
View(XY_Sem1)
XY_Sem1$ANO<-NULL
XY_Sem1$SEMANA<-NULL
library(sqldf)
Data_sem1 <- sqldf("SELECT *
FROM Data_sem
LEFT JOIN XY_Sem1 USING(Ano_Sem)")
View(Data_sem1)
XY_Sem1 = aggregate(XY_Sem1,
by = list(XY_Sem1$Ano_sem),
FUN = mean)
XY_Sem2 = aggregate(XY_Sem1,
by = list(XY_Sem1$Ano_sem),
FUN = mean)
XY_Sem2 = aggregate(XY_Sem1,
by = list(XY_Sem1$Ano_sem),
FUN = sum)
XY_Sem2 = aggregate(XY_Sem1,
by = list(Ano_sem),
FUN = sum)
XY_Sem2 = aggregate(XY_Sem1,
by = list(XY_Sem1$Ano_sem),
FUN = sum)
XY_Sem2 = aggregate(XY_Sem1,
by = list(XY_Sem1$Ano_sem),
FUN = mean)
XY_Sem2 = aggregate(XY_Sem1,
by = list(XY_Sem1$Ano_sem),
FUN = count())
distinct(XY_Sem1,Ano_Sem, .keep_all= TRUE)
XY_Sem1<-distinct(XY_Sem1,Ano_Sem, .keep_all= TRUE)
library(sqldf)
Data_sem1 <- sqldf("SELECT *
FROM Data_sem
LEFT JOIN XY_Sem1 USING(Ano_Sem)")
View(Data_sem1)
Data_Sem1$Ano_Mes <- NULL
View(Data_sem1)
View(Data_sem1)
View(Data_sem1)
head(Data_sem1)
Data_Sem1$Ano_MSem <- NULL
Data_sem1$Ano_Sem <- NULL
head(Data_sem1)
trcntrl = trainControl(method="cv", number=10)
model_sem = caret::train(Total_Accidentes~.-ACCIDENTES_GRAVES-ACCIDENTES_LEVES, data=Data_sem,
method = "lm", trControl = trcntrl,
preProcess=c("center", "scale"),
tuneLength = 10)
summary(model_sem)
trcntrl = trainControl(method="cv", number=10)
model_sem = caret::train(Total_Accidentes~ANO+SEMAN+Feria_Flores+Semana.Santa+Feriado_Lunes+Feriados_Otros, data=Data_sem1,
method = "lm", trControl = trcntrl,
preProcess=c("center", "scale"),
tuneLength = 10)
trcntrl = trainControl(method="cv", number=10)
model_sem = caret::train(Total_Accidentes~ANO+SEMANA+Feria_Flores+Semana.Santa+Feriado_Lunes+Feriados_Otros, data=Data_sem1,
method = "lm", trControl = trcntrl,
preProcess=c("center", "scale"),
tuneLength = 10)
trcntrl = trainControl(method="cv", number=10)
model_sem = caret::train(Total_Accidentes~ANO+SEMANA+Feria_Flores+Semana_Santa+Feriado_Lunes+Feriados_Otros, data=Data_sem1,
method = "lm", trControl = trcntrl,
preProcess=c("center", "scale"),
tuneLength = 10)
View(Data_sem1)
trcntrl = trainControl(method="cv", number=10)
model_sem = caret::train(Total_Accidentes~ANO+SEMANA+Feria_Flores+Semana_Santa+Feriados_Lunes+Feriados_Otros, data=Data_sem1,
method = "lm", trControl = trcntrl,
preProcess=c("center", "scale"),
tuneLength = 10)
summary(model_sem)
saveRDS(model_sem,"model_sem.rds")
runApp('Shiny_prediccion.R')
save(Data_Sem1,"Data_Sem1")
save(Data_Sem1,"Data_Sem1")
save(Data_sem1,"Data_Sem1"
)
saveRDS(model_sem,"model_sem.rds")
save(Data_sem1,"Data_sem1")
save(Data_sem1,file="Data_sem1")
save(Data_sem1,file="Data_sem1.Rda")
runApp('Shiny_prediccion.R')
View(Data_sem1)
View(Data_sem1)
View(Data_sem1)
View(Data_sem1)
View(Data_sem1)
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
load(file = "Data_sem1.Rda")
load(file = "Data_sem1.Rda")
runApp('Shiny_prediccion.R')
load(file = "Dias_Especiales_Mensuales.Rda")
load(file = "Dias_Especiales_Semanal.Rda")
load(file = "Frecuencia_De_Accidentes_Diario.Rda")
load(file = "Frecuencia_De_Accidentes_Semanal.Rda")
XY_Sem <- Total_Dataset_Freq_M
load(file = "Frecuencia_De_Accidentes_Mensual.Rda")
View(XY_Sem)
View(Total_Dataset_Freq_M)
View(Total_Dataset_Freq)
View(Dias_Especiales_Semanal)
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
View(XY_Sem)
View(Data_sem1)
View(Data_sem1)
View(Data_sem1)
View(XY_Sem)
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
raw_data_2014 <- read.csv(file="./data/Accidentalidad_georreferenciada_2014.csv", encoding="UTF-8", header=TRUE, sep=",")
head(raw_data_2014)
summary(raw_data_2014)
str(raw_data_2014)
levels(raw_data_2014$CLASE)
levels(raw_data_2014$CLASE) <- c("Atropello","Caida_Ocupante","Choque","Otro","Otro",
"Volcamiento")
table(raw_data_2014$GRAVEDAD)
raw_data_2015 <- read.csv(file="./data/Accidentalidad_georreferenciada_2015.csv", encoding="UTF-8", header=TRUE, sep=",")
head(raw_data_2015)
summary(raw_data_2015)
str(raw_data_2015)
levels(raw_data_2015$CLASE)
levels(raw_data_2015$CLASE) <- c("Otro","Atropello","Caida_Ocupante","Caida_Ocupante","Choque",
"Otro","Otro","Volcamiento")
levels(raw_data_2015$CLASE)
raw_data_2016 <- read.csv(file="./data/Accidentalidad_georreferenciada_2016.csv", encoding="UTF-8", header=TRUE, sep=",")
head(raw_data_2016)
str(raw_data_2016)
levels(raw_data_2016$CLASE)
levels(raw_data_2016$CLASE) <- c("Otro","Atropello","Caida_Ocupante","Caida_Ocupante","Choque",
"Otro","Otro","Volcamiento")
levels(raw_data_2016$CLASE)
raw_data_2017 <- read.csv(file="./data/Accidentalidad_georreferenciada_2017.csv", encoding="UTF-8", header=TRUE, sep=",")
head(raw_data_2017)
str(raw_data_2017)
levels(raw_data_2017$CLASE)
levels(raw_data_2017$CLASE) <- c("Atropello","Caida_Ocupante","Caida_Ocupante","Choque","Choque",
"Choque","Otro","Otro","Volcamiento")
levels(raw_data_2017$CLASE)
summary(raw_data_2014$CLASE)
summary(raw_data_2015$CLASE)
summary(raw_data_2016$CLASE)
summary(raw_data_2017$CLASE)
raw_data_2018 <- read.csv(file="./data/Accidentalidad_georreferenciada_2018.csv", encoding="UTF-8", header=TRUE, sep=",")
str(raw_data_2018)
levels(raw_data_2018$CLASE)
levels(raw_data_2018$CLASE) <- c("Atropello","Caida_Ocupante","Caida_Ocupante","Choque","Otro","Otro", "Volcamiento")
levels(raw_data_2018$CLASE)
summary(raw_data_2018$CLASE)
Total_Dataset <- rbind(raw_data_2014,raw_data_2015,raw_data_2016, raw_data_2017, raw_data_2018)
str(Total_Dataset)
levels(Total_Dataset$GRAVEDAD)
summary(Total_Dataset$GRAVEDAD)
rm(raw_data_2014,raw_data_2015,raw_data_2016, raw_data_2017, raw_data_2018)
Total_Dataset$FECHA <- as.Date(Total_Dataset$FECHA, format="%Y-%m-%d")
tail(Total_Dataset)
Total_Dataset$DIA <- as.factor(Total_Dataset$DIA)
Total_Dataset$MES <- as.factor(Total_Dataset$MES)
tail(Total_Dataset)
library(sqldf)
Total_Dataset_Freq <- sqldf("SELECT FECHA, GRAVEDAD, count(GRAVEDAD) AS FREQ, DIA_NOMBRE, MES, DIA
FROM Total_Dataset
GROUP BY FECHA, GRAVEDAD")
Total_Dataset_Freq$ANO <- as.factor(format(Total_Dataset_Freq$FECHA,'%Y'))
Total_Dataset_Freq$SEMANA <-as.factor(format(Total_Dataset_Freq$FECHA,'%V'))
tail(Total_Dataset_Freq)
levels(Total_Dataset_Freq$DIA_NOMBRE)
levels(Total_Dataset_Freq$DIA_NOMBRE) <- c("DOMINGO","JUEVES","LUNES","MARTES","MIERCOLES","SABADO","VIERNES")
levels(Total_Dataset_Freq$DIA_NOMBRE)
Total_Dataset_Freq$DIA_NOMBRE <- ordered(Total_Dataset_Freq$DIA_NOMBRE,c("LUNES", "MARTES", "MIERCOLES", "JUEVES", "VIERNES", "SABADO", "DOMINGO"))
levels(Total_Dataset_Freq$DIA_NOMBRE)
Dias_Especiales <- read.csv(file="./data/Caracterizacion_v2.csv", encoding="UTF-8", header=TRUE, sep=";",stringsAsFactors=FALSE)
head(Dias_Especiales)
Dias_Especiales <- Dias_Especiales[1:1826,]
Dias_Especiales$FECHA <- as.Date(Dias_Especiales$Fecha, format="%d-%m-%Y")
Dias_Especiales$Fecha <- NULL
Total_Dataset_Freq <- sqldf("SELECT *
FROM Total_Dataset_Freq
LEFT JOIN Dias_Especiales USING(FECHA)")
head(Total_Dataset_Freq)
library(plotly)
plot_ly(data=Total_Dataset_Freq,
x = ~FECHA,
y = ~FREQ,
type = "scatter", mode = "lines",
split = ~ANO,
ine=list(width=1))%>%
layout(title='Accidentes_Medellin',
xaxis=list(title="Dia"),
yaxis=list(title="Unidades"))
plot_ly(data=Total_Dataset_Freq,
x = ~ANO,
y = ~FREQ,
type = "box")%>%
layout(title='Accidentes_Medellin',
xaxis=list(title="ano"),
yaxis=list(title="Unidades"))
plot_ly(data=Total_Dataset_Freq,
x = ~MES,
y = ~FREQ,
type = "box")%>%
layout(title='Accidentes_Medellin',
xaxis=list(title="Mes"),
yaxis=list(title="Unidades"))
plot_ly(data=Total_Dataset_Freq,
x = ~DIA_NOMBRE,
y = ~FREQ,
type = "box")%>%
layout(title='Accidentes_Medellin',
xaxis=list(title="Dia_Nombre"),
yaxis=list(title="Unidades"))
plot_ly(data=Total_Dataset_Freq,
x = ~SEMANA,
y = ~FREQ,
type = "box")%>%
layout(title='Accidentes_Medellin',
xaxis=list(title="SEMANA"),
yaxis=list(title="Unidades"))
attach(Total_Dataset_Freq)
aggregate(FREQ~ANO*SEMANA, data=Total_Dataset_Freq,FUN=mean)%>%
plot_ly(x = ~SEMANA,
y = ~FREQ,
type = "scatter" ,mode = "lines",
split = ~ANO,
line=list(width=1))%>%
layout(title='Promedio semanal de ACCIDENTES en Medellin',
xaxis=list(title="SEMANA"),
yaxis=list(title="No. Accidentes"))
aggregate(FREQ~ANO*MES, data=Total_Dataset_Freq,FUN=mean)%>%
plot_ly(x = ~MES,
y = ~FREQ,
type = "scatter" ,mode = "lines",
split = ~ANO,
line=list(width=1))%>%
layout(title='Promedio mensual de ACCIDENTES en Medellin',
xaxis=list(title="Mes"),
yaxis=list(title="No. Accidentes"))
aggregate(FREQ~GRAVEDAD*MES, data=Total_Dataset_Freq,FUN=mean)%>%
plot_ly(x = ~MES,
y = ~FREQ,
type = "scatter" ,mode = "lines",
split = ~GRAVEDAD,
line=list(width=1))%>%
layout(title='Promedio mensual de ACCIDENTES en Medellin por GRAVEDAD',
xaxis=list(title="Mes"),
yaxis=list(title="No. Accidentes"))
library(plotly)
aggregate(FREQ~GRAVEDAD*FECHA, data=Total_Dataset_Freq,FUN=mean)%>%
plot_ly(x = ~FECHA,
y = ~FREQ,
type = "scatter" ,mode = "lines",
split = ~GRAVEDAD,
line=list(width=1))%>%
layout(title='Promedio diario ACCIDENTES en Medellin por GRAVEDAD',
xaxis=list(title="Mes"),
yaxis=list(title="No. Accidentes"))
aggregate(FREQ~ANO*DIA_NOMBRE, data=Total_Dataset_Freq,FUN=mean)%>%
plot_ly(x = ~DIA_NOMBRE,
y = ~FREQ,
type = "scatter" ,mode = "lines",
split = ~ANO,
line=list(width=1))%>%
layout(title='Promedio diario DIA DE LA SEMANA de Accidentes de Transito en Medellin',
xaxis=list(title="Dia Semana"),
yaxis=list(title="No. Accidentes"))
aggregate(FREQ~ANO*GRAVEDAD, data=Total_Dataset_Freq,FUN=mean)%>%
plot_ly(x = ~GRAVEDAD,
y = ~FREQ,
type = "scatter" ,mode = "lines",
split = ~ANO,
line=list(width=1))%>%
layout(title='Promedio diario CLASE de Accidentes de Transito en Medellin',
xaxis=list(title="Clase"),
yaxis=list(title="No. Accidentes"))
head(Total_Dataset_Freq)
library(reshape)
Total_Dataset_Freq <- cast(Total_Dataset_Freq[,c(1,2,3)],FECHA~GRAVEDAD)
Total_Dataset_Freq <- sqldf("SELECT *
FROM Total_Dataset_Freq
LEFT JOIN Dias_Especiales USING(FECHA)")
Total_Dataset_Freq$ANO <- as.factor(format(Total_Dataset_Freq$FECHA,'%Y'))
Total_Dataset_Freq$SEMANA <-as.factor(format(Total_Dataset_Freq$FECHA,'%V'))
Total_Dataset_Freq$DIA <-as.factor(format(Total_Dataset_Freq$FECHA,'%d'))
Total_Dataset_Freq$DIA_SEMANA <-as.factor(weekdays(Total_Dataset_Freq$FECHA))
Total_Dataset_Freq$MES <-as.factor(format(Total_Dataset_Freq$FECHA,'%m'))
head(Total_Dataset_Freq)
Total_Dataset_Freq[is.na(Total_Dataset_Freq)] <- 0
Total_Dataset_Freq$Total_Accidentes <- Total_Dataset_Freq$`SOLO DAÃâOS` + Total_Dataset_Freq$MUERTO + Total_Dataset_Freq$HERIDO
aggregate(FREQ~ANO*DIA_NOMBRE, data=Total_Dataset_Freq,FUN=mean)
aggregate(FREQ~ANO*DIA_NOMBRE, data=Total_Dataset_Freq,FUN=mean)%>%
plot_ly(x = ~DIA_NOMBRE,
y = ~FREQ,
type = "scatter" ,mode = "lines",
split = ~ANO,
line=list(width=1))%>%
layout(title='Promedio diario DIA DE LA SEMANA de Accidentes de Transito en Medellin',
xaxis=list(title="Dia Semana"),
yaxis=list(title="No. Accidentes"))
aggregate(FREQ~GRAVEDAD*FECHA, data=Total_Dataset_Freq,FUN=mean)%>%
plot_ly(x = ~FECHA,
y = ~FREQ,
type = "scatter" ,mode = "lines",
split = ~GRAVEDAD,
line=list(width=1))%>%
layout(title='Promedio diario ACCIDENTES en Medellin por GRAVEDAD',
xaxis=list(title="Mes"),
yaxis=list(title="No. Accidentes"))
runApp('Shiny_prediccion.R')
load(file = "Data_sem1.Rda")
XY_Sem_shiny <- Data_sem1
View(XY_Sem_shiny)
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
load(file="./data_modelos_diario(Total_Dataset_Freq_diaria.Rda)")
load(file="../data_modelos_diario(Total_Dataset_Freq_diaria.Rda)")
load(file="./data_modelos_diario/Total_Dataset_Freq_diaria.Rda")
Data_Historica_Diaria<-Total_Dataset_Freq
View(Data_Historica_Diaria)
head(Data_Historica_Diaria)
Data_Historica_Diaria<-Total_Dataset_Freq[,c("FECHA","ACCIDENTES_GRAVES","ACCIDENTES_LEVES","TOTAL_ACCIDENTES","SEMANA","MES","DIA")]
head(Data_Historica_Diaria)
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
load(file="../data_modelos_diario/Total_Dataset_Freq_diaria.Rda")
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
View(Total_Dataset_Freq)
View(Total_Dataset_Freq)
View(Total_Dataset_Freq)
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
model_D_T <- readRDS(file="./data_modelos_diario/Total_Dataset_Freq_diaria.Rda")
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
model_sem <- readRDS("model_sem.rds")
model_sem
runApp('Shiny_prediccion.R')
model_sem <- readRDS("model_sem.rds")
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
model_D_L <- readRDS("./data_modelos_diario/Prediccion_leves_Diario.Rds")
ummary(model_D_L)
summary(model_D_L)
runApp('Shiny_prediccion.R')
model_D_G <- readRDS("./data_modelos_diario/Prediccion_Grave_Diario.Rds")
model_D_G
summary(model_D_G)
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
load(file="./data_modelos_semana/Total_Dataset_Freq_S_semanal.Rda")
View(Total_Dataset_Freq_S)
head(Total_Dataser_Freq_S)
head(Total_Dataset_Freq_S)
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
View(Data_Historica_Diaria)
View(Data_Historica_Diaria)
View(XY_Sem_shiny)
View(XY_Sem_shiny)
View(Data_Historica_Diaria)
runApp('Shiny_prediccion.R')
load(file="./data_modelos_mes/Total_Dataset_Freq_M_mensual.Rda")
View(Total_Dataset_Freq_M)
View(Total_Dataset_Freq_M)
View(Total_Dataset_Freq_M)
View(Total_Dataset_Freq_M)
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
View(XY_Sem_shiny)
View(XY_Sem_shiny)
View(XY_Sem_shiny)
runApp('Shiny_prediccion.R')
View(XY_Sem_shiny)
View(XY_Sem_shiny)
View(XY_Sem_shiny)
head(XY_Sem_shiny)
runApp('Shiny_prediccion.R')
View(Total_Dataset_Freq_S)
View(Total_Dataset_Freq_S)
runApp('Shiny_prediccion.R')
load(file="./data_modelos_mes/Total_Dataset_Freq_M_mensual.Rda")
View(Total_Dataset_Freq_M)
runApp('Shiny_prediccion.R')
load(file="./data_modelos_diario/datos_pronostico_diario.Rda")
View(datos_pronostico_diario)
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
load(file="./data_modelos_diario/datos_pronostico_diario.Rda")
model_D_T <- readRDS("./data_modelos_diario/Prediccion_Total_Diario.Rds")
prediccion_Total_D<-predict(model_D_T,datos_pronostico_diario[,c("Ano_Base","DIA","SEMANA","Feriado_Lunes","Feriado_Otro","Madre","Semana_Santa","Viernes_Desp_Quincena_v2","Feria_Flores")])
View(model_D_T)
View(datos_pronostico_diario)
datos_PD1 <- subset(datos_pronostico_diario, FECHA>="2019-01-1")
View(datos_PD1)
View(datos_pronostico_diario)
datos_PD1 <- subset(datos_pronostico_diario, Fecha>="2019-01-1")
View(datos_PD1)
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
#Grafica
}
runApp('Shiny_prediccion.R')
load(file="./data_modelos_semana/datos_pronostico_semanal.Rda")
runApp('Shiny_prediccion.R')
View(datos_pronostico_semanal)
runApp('Shiny_prediccion.R')
load(file="./data_modelos_semana/datos_pronostico_semanal.Rda")
datos_PS1 <- subset(datos_pronostico_semanal, ANO>="2019")
View(datos_PD1)
load(file="./data_modelos_semana/datos_pronostico_semanal.Rda")
datos_PS1 <- subset(datos_pronostico_semanal, ANO>="2019")
datos_PS1 <- datos_pronostico_semanal[Ano="2019"|Ano="2020"|Ano="2021"]
datos_PS1 <- datos_pronostico_semanal[Ano="2019"|Ano="2020"|Ano="2021"]
datos_PS1 <- subset(datos_pronostico_semanal, ANO="2019"|ANO="2020"|ANO="2021"]
datos_PS1 <- subset(datos_pronostico_semanal, ANO="2019"]
View(datos_pronostico_semanal)
datos_PS1 <- subset[datos_pronostico_semanal, ANO=2019|ANO=2020|ANO=2021]
datos_PS1 <- subset[datos_pronostico_semanal, ANO=2019 | ANO=2020 | ANO=2021]
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
datos_PS1 <- subset[datos_pronostico_semanal, ANO=="2019" | ANO=="2020" | ANO=="2021"]
datos_PS1 <- subset[datos_pronostico_semanal, ANO=="2019"]
datos_PS1 <- subset(datos_pronostico_semanal, ANO=="2019")
View(datos_PS1)
runApp('Shiny_prediccion.R')
View(datos_PS1)
View(datos_PS1)
View(datos_PS1)
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
install.packages("shinydashboard")
runApp('Shiny_prediccion.R')
load(file="./data_modelos_mes/datos_pronostico_mensual.Rda")
View(datos_pronostico_mensual)
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
runApp('Shiny_prediccion.R')
install.packages('rsconnect')
install.packages('rsconnect')
library(shiny); runApp('Shiny_prediccion.R')
