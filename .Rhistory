Dias_Especiales$FECHA <- as.Date(Dias_Especiales$Fecha, format="%d-%m-%Y")
Dias_Especiales$Fecha <- NULL
Total_Dataset_Freq <- sqldf("SELECT *
FROM Total_Dataset_Freq
LEFT JOIN Dias_Especiales USING(FECHA)")
head(Total_Dataset_Freq)
library(plotly)
plot_ly(data=Total_Dataset_Freq,
x = ~FECHA,
y = ~FREQ,
type = "scatter", mode = "lines",
split = ~ANO,
ine=list(width=1))%>%
layout(title='Accidentes_Medellin',
xaxis=list(title="Dia"),
yaxis=list(title="Unidades"))
plot_ly(data=Total_Dataset_Freq,
x = ~ANO,
y = ~FREQ,
type = "box")%>%
layout(title='Accidentes_Medellin',
xaxis=list(title="ano"),
yaxis=list(title="Unidades"))
plot_ly(data=Total_Dataset_Freq,
x = ~MES,
y = ~FREQ,
type = "box")%>%
layout(title='Accidentes_Medellin',
xaxis=list(title="Mes"),
yaxis=list(title="Unidades"))
plot_ly(data=Total_Dataset_Freq,
x = ~DIA_NOMBRE,
y = ~FREQ,
type = "box")%>%
layout(title='Accidentes_Medellin',
xaxis=list(title="Dia_Nombre"),
yaxis=list(title="Unidades"))
plot_ly(data=Total_Dataset_Freq,
x = ~SEMANA,
y = ~FREQ,
type = "box")%>%
layout(title='Accidentes_Medellin',
xaxis=list(title="SEMANA"),
yaxis=list(title="Unidades"))
attach(Total_Dataset_Freq)
aggregate(FREQ~ANO*SEMANA, data=Total_Dataset_Freq,FUN=mean)%>%
plot_ly(x = ~SEMANA,
y = ~FREQ,
type = "scatter" ,mode = "lines",
split = ~ANO,
line=list(width=1))%>%
layout(title='Promedio diario mensual de ACCIDENTES en Medellin',
xaxis=list(title="SEMANA"),
yaxis=list(title="No. Accidentes"))
aggregate(FREQ~ANO*MES, data=Total_Dataset_Freq,FUN=mean)%>%
plot_ly(x = ~MES,
y = ~FREQ,
type = "scatter" ,mode = "lines",
split = ~ANO,
line=list(width=1))%>%
layout(title='Promedio diario mensual de ACCIDENTES en Medellin',
xaxis=list(title="Mes"),
yaxis=list(title="No. Accidentes"))
aggregate(FREQ~ANO*DIA_NOMBRE, data=Total_Dataset_Freq,FUN=mean)%>%
plot_ly(x = ~DIA_NOMBRE,
y = ~FREQ,
type = "scatter" ,mode = "lines",
split = ~ANO,
line=list(width=1))%>%
layout(title='Promedio diario DIA DE LA SEMANA de Accidentes de Transito en Medellin',
xaxis=list(title="Dia Semana"),
yaxis=list(title="No. Accidentes"))
aggregate(FREQ~ANO*CLASE, data=Total_Dataset_Freq,FUN=mean)%>%
plot_ly(x = ~CLASE,
y = ~FREQ,
type = "scatter" ,mode = "lines",
split = ~ANO,
line=list(width=1))%>%
layout(title='Promedio diario CLASE de Accidentes de Transito en Medellin',
xaxis=list(title="Clase"),
yaxis=list(title="No. Accidentes"))
library(reshape)
Total_Dataset_Freq <- cast(Total_Dataset_Freq[,c(1,2,3)],FECHA~CLASE)
Total_Dataset_Freq <- sqldf("SELECT *
FROM Total_Dataset_Freq
LEFT JOIN Dias_Especiales USING(FECHA)")
Total_Dataset_Freq$ANO <- as.factor(format(Total_Dataset_Freq$FECHA,'%Y'))
Total_Dataset_Freq$SEMANA <-as.factor(format(Total_Dataset_Freq$FECHA,'%V'))
Total_Dataset_Freq$DIA <-as.factor(format(Total_Dataset_Freq$FECHA,'%d'))
Total_Dataset_Freq$DIA_SEMANA <-as.factor(weekdays(Total_Dataset_Freq$FECHA))
Total_Dataset_Freq$MES <-as.factor(format(Total_Dataset_Freq$FECHA,'%m'))
head(Total_Dataset_Freq)
Total_Dataset_Freq[is.na(Total_Dataset_Freq)] <- 0
Total_Dataset_Freq$Total_Accidentes <- Total_Dataset_Freq$Atropello + Total_Dataset_Freq$Caida_Ocupante + Total_Dataset_Freq$Choque + Total_Dataset_Freq$Otro + Total_Dataset_Freq$Volcamiento
tail(Total_Dataset_Freq)
Train_D_Dataset <- subset(Total_Dataset_Freq, ANO!="2018")
summary(Train_D_Dataset$ANO)
Train_D_Dataset$ANO <- factor(Train_D_Dataset$ANO)
summary(Train_D_Dataset$ANO)
library(sqldf)
Test_D_Dataset <- sqldf("SELECT *
FROM Total_Dataset_Freq
WHERE ANO == 2018")
summary(Test_D_Dataset$ANO)
Test_D_Dataset$ANO <- factor(Test_D_Dataset$ANO)
summary(Test_D_Dataset$ANO)
set.seed(1) # fija la semilla del generador de nÃºmeros para que sea reproducible
head(Train_D_Dataset)
library(caret)
trcntrl = trainControl(method="cv", number=10)
caret_knn_fit = caret::train(Total_Accidentes~SEMANA+DIA_SEMANA+Semana.Santa+Feriado+Quincena+Viernes_Desp_Qincena+Viernes_Antes_Puente, data=Train_D_Dataset,
method = "knn", trControl = trcntrl,
preProcess=c("center", "scale"),
tuneLength = 10)
summary(caret_knn_fit)
caret_knn_fit
y_tr_pred_knn<-predict(caret_knn_fit,Train_D_Dataset[,c("SEMANA","DIA_SEMANA","Semana.Santa","Feriado","Quincena","Viernes_Desp_Qincena","Viernes_Antes_Puente")])
mse_tr_knn<-mean((Train_D_Dataset$Total_Accidentes-y_tr_pred_knn)^2) # calcula el mse de entrenamiento
RMSE_tr_knn = sqrt(mse_tr_knn)
mse_tr_knn
RMSE_tr_knn
y_test_pred_knn<-predict(caret_knn_fit,Test_D_Dataset[,c("SEMANA","DIA_SEMANA","Semana.Santa","Feriado","Quincena","Viernes_Desp_Qincena","Viernes_Antes_Puente")])
mse_test_knn<-mean((Test_D_Dataset$Total_Accidentes-y_test_pred_knn)^2) # calcula el mse de entrenamiento
RMSE_test_knn = sqrt(mse_test_knn)
mse_test_knn
RMSE_test_knn
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~Total_Accidentes,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_knn,
name='Modelo knn',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
head(Train_D_Dataset)
trcntrl = trainControl(method="cv", number=10)
caret_lm_fit = caret::train(Total_Accidentes~SEMANA+DIA_SEMANA+Semana.Santa+Feriado+Quincena+Viernes_Desp_Qincena+Viernes_Antes_Puente, data=Train_D_Dataset,
method = "lm", trControl = trcntrl,
preProcess=c("center", "scale"),
tuneLength = 10)
summary(caret_lm_fit)
caret_lm_fit
y_tr_pred_lm<-predict(caret_lm_fit,Train_D_Dataset[,c("SEMANA","DIA_SEMANA","Semana.Santa","Feriado","Quincena","Viernes_Desp_Qincena","Viernes_Antes_Puente")])
mse_tr_lm<-mean((Train_D_Dataset$Total_Accidentes-y_tr_pred_lm)^2) # calcula el mse de entrenamiento
RMSE_tr_lm = sqrt(mse_tr_lm)
mse_tr_lm
RMSE_tr_lm
y_test_pred_lm<-predict(caret_lm_fit,Test_D_Dataset[,c("SEMANA","DIA_SEMANA","Semana.Santa","Feriado","Quincena","Viernes_Desp_Qincena","Viernes_Antes_Puente")])
mse_test_lm<-mean((Test_D_Dataset$Total_Accidentes-y_test_pred_lm)^2) # calcula el mse de entrenamiento
RMSE_test_lm = sqrt(mse_test_lm)
mse_test_lm
RMSE_test_lm
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~Total_Accidentes,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_lm,
name='Modelo lm',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
View(Dias_Especiales)
trcntrl = trainControl(method="cv", number=10)
caret_lm_fit = caret::train(Total_Accidentes~DIA_SEMANA+Semana.Santa+Feriado+Quincena+Viernes_Desp_Qincena+Viernes_Antes_Puente, data=Train_D_Dataset,
method = "lm", trControl = trcntrl,
preProcess=c("center", "scale"),
tuneLength = 10)
View(Test_D_Dataset)
knitr::opts_chunk$set(echo = TRUE)
raw_data_2014 <- read.csv(file="./data/Accidentalidad_georreferenciada_2014.csv", encoding="UTF-8", header=TRUE, sep=",")
head(raw_data_2014)
summary(raw_data_2014)
str(raw_data_2014)
levels(raw_data_2014$CLASE)
levels(raw_data_2014$CLASE) <- c("Atropello","Caida_Ocupante","Choque","Otro","Otro",
"Volcamiento")
levels(raw_data_2014$CLASE)
raw_data_2015 <- read.csv(file="./data/Accidentalidad_georreferenciada_2015.csv", encoding="UTF-8", header=TRUE, sep=",")
head(raw_data_2015)
summary(raw_data_2015)
str(raw_data_2015)
levels(raw_data_2015$CLASE)
levels(raw_data_2015$CLASE) <- c("Otro","Atropello","Caida_Ocupante","Caida_Ocupante","Choque",
"Otro","Otro","Volcamiento")
levels(raw_data_2015$CLASE)
raw_data_2016 <- read.csv(file="./data/Accidentalidad_georreferenciada_2016.csv", encoding="UTF-8", header=TRUE, sep=",")
head(raw_data_2016)
str(raw_data_2016)
levels(raw_data_2016$CLASE)
levels(raw_data_2016$CLASE) <- c("Otro","Atropello","Caida_Ocupante","Caida_Ocupante","Choque",
"Otro","Otro","Volcamiento")
levels(raw_data_2016$CLASE)
raw_data_2017 <- read.csv(file="./data/Accidentalidad_georreferenciada_2017.csv", encoding="UTF-8", header=TRUE, sep=",")
head(raw_data_2017)
str(raw_data_2017)
levels(raw_data_2017$CLASE)
levels(raw_data_2017$CLASE) <- c("Atropello","Caida_Ocupante","Caida_Ocupante","Choque","Choque",
"Choque","Otro","Otro","Volcamiento")
levels(raw_data_2017$CLASE)
summary(raw_data_2014$CLASE)
summary(raw_data_2015$CLASE)
summary(raw_data_2016$CLASE)
summary(raw_data_2017$CLASE)
raw_data_2018 <- read.csv(file="./data/Accidentalidad_georreferenciada_2018.csv", encoding="UTF-8", header=TRUE, sep=",")
str(raw_data_2018)
levels(raw_data_2018$CLASE)
levels(raw_data_2018$CLASE) <- c("Atropello","Caida_Ocupante","Caida_Ocupante","Choque","Otro","Otro", "Volcamiento")
levels(raw_data_2018$CLASE)
summary(raw_data_2018$CLASE)
Total_Dataset <- rbind(raw_data_2014,raw_data_2015,raw_data_2016, raw_data_2017, raw_data_2018)
str(Total_Dataset)
levels(Total_Dataset$CLASE)
summary(Total_Dataset$CLASE)
rm(raw_data_2014,raw_data_2015,raw_data_2016, raw_data_2017, raw_data_2018)
Total_Dataset$FECHA <- as.Date(Total_Dataset$FECHA, format="%Y-%m-%d")
tail(Total_Dataset)
Total_Dataset$DIA <- as.factor(Total_Dataset$DIA)
Total_Dataset$MES <- as.factor(Total_Dataset$MES)
tail(Total_Dataset)
library(sqldf)
Total_Dataset_Freq <- sqldf("SELECT FECHA, CLASE, count(CLASE) AS FREQ, DIA_NOMBRE, MES, DIA
FROM Total_Dataset
GROUP BY FECHA, CLASE")
Total_Dataset_Freq$ANO <- as.factor(format(Total_Dataset_Freq$FECHA,'%Y'))
Total_Dataset_Freq$SEMANA <-as.factor(format(Total_Dataset_Freq$FECHA,'%V'))
tail(Total_Dataset_Freq)
levels(Total_Dataset_Freq$DIA_NOMBRE)
levels(Total_Dataset_Freq$DIA_NOMBRE) <- c("DOMINGO","JUEVES","LUNES","MARTES","MIERCOLES","SABADO","VIERNES")
levels(Total_Dataset_Freq$DIA_NOMBRE)
Total_Dataset_Freq$DIA_NOMBRE <- ordered(Total_Dataset_Freq$DIA_NOMBRE,c("LUNES", "MARTES", "MIERCOLES", "JUEVES", "VIERNES", "SABADO", "DOMINGO"))
levels(Total_Dataset_Freq$DIA_NOMBRE)
Dias_Especiales <- read.csv(file="./data/Caracterizacion.csv", encoding="UTF-8", header=TRUE, sep=";",stringsAsFactors=FALSE)
head(Dias_Especiales)
Dias_Especiales <- Dias_Especiales[1:1826,]
Dias_Especiales$FECHA <- as.Date(Dias_Especiales$Fecha, format="%d-%m-%Y")
Dias_Especiales$Fecha <- NULL
Total_Dataset_Freq <- sqldf("SELECT *
FROM Total_Dataset_Freq
LEFT JOIN Dias_Especiales USING(FECHA)")
head(Total_Dataset_Freq)
library(plotly)
plot_ly(data=Total_Dataset_Freq,
x = ~FECHA,
y = ~FREQ,
type = "scatter", mode = "lines",
split = ~ANO,
ine=list(width=1))%>%
layout(title='Accidentes_Medellin',
xaxis=list(title="Dia"),
yaxis=list(title="Unidades"))
plot_ly(data=Total_Dataset_Freq,
x = ~ANO,
y = ~FREQ,
type = "box")%>%
layout(title='Accidentes_Medellin',
xaxis=list(title="ano"),
yaxis=list(title="Unidades"))
plot_ly(data=Total_Dataset_Freq,
x = ~MES,
y = ~FREQ,
type = "box")%>%
layout(title='Accidentes_Medellin',
xaxis=list(title="Mes"),
yaxis=list(title="Unidades"))
plot_ly(data=Total_Dataset_Freq,
x = ~DIA_NOMBRE,
y = ~FREQ,
type = "box")%>%
layout(title='Accidentes_Medellin',
xaxis=list(title="Dia_Nombre"),
yaxis=list(title="Unidades"))
plot_ly(data=Total_Dataset_Freq,
x = ~SEMANA,
y = ~FREQ,
type = "box")%>%
layout(title='Accidentes_Medellin',
xaxis=list(title="SEMANA"),
yaxis=list(title="Unidades"))
attach(Total_Dataset_Freq)
aggregate(FREQ~ANO*SEMANA, data=Total_Dataset_Freq,FUN=mean)%>%
plot_ly(x = ~SEMANA,
y = ~FREQ,
type = "scatter" ,mode = "lines",
split = ~ANO,
line=list(width=1))%>%
layout(title='Promedio diario mensual de ACCIDENTES en Medellin',
xaxis=list(title="SEMANA"),
yaxis=list(title="No. Accidentes"))
aggregate(FREQ~ANO*MES, data=Total_Dataset_Freq,FUN=mean)%>%
plot_ly(x = ~MES,
y = ~FREQ,
type = "scatter" ,mode = "lines",
split = ~ANO,
line=list(width=1))%>%
layout(title='Promedio diario mensual de ACCIDENTES en Medellin',
xaxis=list(title="Mes"),
yaxis=list(title="No. Accidentes"))
aggregate(FREQ~ANO*DIA_NOMBRE, data=Total_Dataset_Freq,FUN=mean)%>%
plot_ly(x = ~DIA_NOMBRE,
y = ~FREQ,
type = "scatter" ,mode = "lines",
split = ~ANO,
line=list(width=1))%>%
layout(title='Promedio diario DIA DE LA SEMANA de Accidentes de Transito en Medellin',
xaxis=list(title="Dia Semana"),
yaxis=list(title="No. Accidentes"))
aggregate(FREQ~ANO*CLASE, data=Total_Dataset_Freq,FUN=mean)%>%
plot_ly(x = ~CLASE,
y = ~FREQ,
type = "scatter" ,mode = "lines",
split = ~ANO,
line=list(width=1))%>%
layout(title='Promedio diario CLASE de Accidentes de Transito en Medellin',
xaxis=list(title="Clase"),
yaxis=list(title="No. Accidentes"))
library(reshape)
Total_Dataset_Freq <- cast(Total_Dataset_Freq[,c(1,2,3)],FECHA~CLASE)
Total_Dataset_Freq <- sqldf("SELECT *
FROM Total_Dataset_Freq
LEFT JOIN Dias_Especiales USING(FECHA)")
Total_Dataset_Freq$ANO <- as.factor(format(Total_Dataset_Freq$FECHA,'%Y'))
Total_Dataset_Freq$SEMANA <-as.factor(format(Total_Dataset_Freq$FECHA,'%V'))
Total_Dataset_Freq$DIA <-as.factor(format(Total_Dataset_Freq$FECHA,'%d'))
Total_Dataset_Freq$DIA_SEMANA <-as.factor(weekdays(Total_Dataset_Freq$FECHA))
Total_Dataset_Freq$MES <-as.factor(format(Total_Dataset_Freq$FECHA,'%m'))
head(Total_Dataset_Freq)
Total_Dataset_Freq[is.na(Total_Dataset_Freq)] <- 0
Total_Dataset_Freq$Total_Accidentes <- Total_Dataset_Freq$Atropello + Total_Dataset_Freq$Caida_Ocupante + Total_Dataset_Freq$Choque + Total_Dataset_Freq$Otro + Total_Dataset_Freq$Volcamiento
tail(Total_Dataset_Freq)
Train_D_Dataset <- subset(Total_Dataset_Freq, ANO!="2018")
summary(Train_D_Dataset$ANO)
Train_D_Dataset$ANO <- factor(Train_D_Dataset$ANO)
summary(Train_D_Dataset$ANO)
library(sqldf)
Test_D_Dataset <- sqldf("SELECT *
FROM Total_Dataset_Freq
WHERE ANO == 2018")
summary(Test_D_Dataset$ANO)
Test_D_Dataset$ANO <- factor(Test_D_Dataset$ANO)
summary(Test_D_Dataset$ANO)
set.seed(1) # fija la semilla del generador de nÃºmeros para que sea reproducible
head(Train_D_Dataset)
library(caret)
trcntrl = trainControl(method="cv", number=10)
caret_knn_fit = caret::train(Total_Accidentes~SEMANA+DIA_SEMANA+Semana.Santa+Feriado+Quincena+Viernes_Desp_Qincena+Viernes_Antes_Puente, data=Train_D_Dataset,
method = "knn", trControl = trcntrl,
preProcess=c("center", "scale"),
tuneLength = 10)
summary(caret_knn_fit)
caret_knn_fit
y_tr_pred_knn<-predict(caret_knn_fit,Train_D_Dataset[,c("SEMANA","DIA_SEMANA","Semana.Santa","Feriado","Quincena","Viernes_Desp_Qincena","Viernes_Antes_Puente")])
mse_tr_knn<-mean((Train_D_Dataset$Total_Accidentes-y_tr_pred_knn)^2) # calcula el mse de entrenamiento
RMSE_tr_knn = sqrt(mse_tr_knn)
mse_tr_knn
RMSE_tr_knn
y_test_pred_knn<-predict(caret_knn_fit,Test_D_Dataset[,c("SEMANA","DIA_SEMANA","Semana.Santa","Feriado","Quincena","Viernes_Desp_Qincena","Viernes_Antes_Puente")])
mse_test_knn<-mean((Test_D_Dataset$Total_Accidentes-y_test_pred_knn)^2) # calcula el mse de entrenamiento
RMSE_test_knn = sqrt(mse_test_knn)
mse_test_knn
RMSE_test_knn
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~Total_Accidentes,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_knn,
name='Modelo knn',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
head(Train_D_Dataset)
trcntrl = trainControl(method="cv", number=10)
caret_lm_fit = caret::train(Total_Accidentes~SEMANA+DIA_SEMANA+Semana.Santa+Feriado+Quincena+Viernes_Desp_Qincena+Viernes_Antes_Puente, data=Train_D_Dataset,
method = "lm", trControl = trcntrl,
preProcess=c("center", "scale"),
tuneLength = 10)
summary(caret_lm_fit)
caret_lm_fit
y_tr_pred_lm<-predict(caret_lm_fit,Train_D_Dataset[,c("SEMANA","DIA_SEMANA","Semana.Santa","Feriado","Quincena","Viernes_Desp_Qincena","Viernes_Antes_Puente")])
mse_tr_lm<-mean((Train_D_Dataset$Total_Accidentes-y_tr_pred_lm)^2) # calcula el mse de entrenamiento
RMSE_tr_lm = sqrt(mse_tr_lm)
mse_tr_lm
RMSE_tr_lm
y_test_pred_lm<-predict(caret_lm_fit,Test_D_Dataset[,c("SEMANA","DIA_SEMANA","Semana.Santa","Feriado","Quincena","Viernes_Desp_Qincena","Viernes_Antes_Puente")])
mse_test_lm<-mean((Test_D_Dataset$Total_Accidentes-y_test_pred_lm)^2) # calcula el mse de entrenamiento
RMSE_test_lm = sqrt(mse_test_lm)
mse_test_lm
RMSE_test_lm
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~Total_Accidentes,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_lm,
name='Modelo lm',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~Total_Accidentes,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_lm,
name='Modelo lm',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
glm_fit<-glm(Total_Accidentes~SEMANA+DIA_SEMANA+DIA+Semana.Santa+Feriado+Quincena+Viernes_Desp_Qincena+Viernes_Antes_Puente, data=Train_D_Dataset, family = "poisson")
summary(glm_fit)
glm_fit
y_tr_pred_glm<-predict(glm_fit,Train_D_Dataset[,c("SEMANA","DIA_SEMANA","DIA","Semana.Santa","Feriado","Quincena","Viernes_Desp_Qincena","Viernes_Antes_Puente")],type="response")
mse_tr_glm<-mean((Train_D_Dataset$Total_Accidentes-y_tr_pred_glm)^2) # calcula el mse de entrenamiento
RMSE_tr_glm = sqrt(mse_tr_glm)
mse_tr_glm
RMSE_tr_glm
y_test_pred_glm<-predict(glm_fit,Test_D_Dataset[,c("SEMANA","DIA_SEMANA","DIA","Semana.Santa","Feriado","Quincena","Viernes_Desp_Qincena","Viernes_Antes_Puente")],type="response")
mse_test_glm<-mean((Train_D_Dataset$Total_Accidentes-y_test_pred_glm)^2) # calcula el mse de entrenamiento
RMSE_test_glm = sqrt(mse_test_glm)
mse_test_glm
RMSE_test_glm
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~Total_Accidentes,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_glm,
name='Modelo glm',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~Total_Accidentes,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_glm,
name='Modelo glm',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
trcntrl = trainControl(method="cv", number=10)
caret_tree_fit = caret::train(Total_Accidentes~SEMANA+DIA_SEMANA+Semana.Santa+Feriado+Quincena+Viernes_Desp_Qincena+Viernes_Antes_Puente,data=Train_D_Dataset,
method = "rpart", trControl = trcntrl,
parms = list(split = "gini"),
preProcess=c("center", "scale"),
tuneLength = 10)
caret_tree_fit
y_tr_pred_tree<-predict(caret_tree_fit,Train_D_Dataset[,c("SEMANA","DIA_SEMANA","Semana.Santa","Feriado","Quincena","Viernes_Desp_Qincena","Viernes_Antes_Puente")])
mse_tr_tree<-mean((Train_D_Dataset$Total_Accidentes-y_tr_pred_tree)^2) # calcula el mse de entrenamiento
RMSE_tr_tree = sqrt(mse_tr_tree)
mse_tr_tree
RMSE_tr_tree
y_test_pred_tree<-predict(caret_tree_fit,Test_D_Dataset[,c("SEMANA","DIA_SEMANA","Semana.Santa","Feriado","Quincena","Viernes_Desp_Qincena","Viernes_Antes_Puente")])
mse_test_tree<-mean((Test_D_Dataset$Total_Accidentes-y_test_pred_tree)^2) # calcula el mse de entrenamiento
RMSE_test_tree = sqrt(mse_test_tree)
mse_test_tree
RMSE_test_tree
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~Total_Accidentes,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_tree,
name='Modelo lm',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~Total_Accidentes,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_tree,
name='Modelo lm',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
trcntrl = trainControl(method="cv", number=10)
caret_rf_fit = caret::train(Total_Accidentes~SEMANA+DIA_SEMANA+Semana.Santa+Feriado+Quincena+Viernes_Desp_Qincena+Viernes_Antes_Puente, data=Train_D_Dataset,
method = "rf", trControl = trcntrl,
prox=TRUE,allowParallel=TRUE)
