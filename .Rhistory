plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~Total_Accidentes,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_tree,
name='Modelo tree',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
trcntrl = trainControl(method="cv", number=10)
caret_tree_fit_m = caret::train(Accidentes_Graves~Ano_v1+Ano_v1*DIA_SEMANA+SEMANA+DIA_SEMANA+Semana.Santa+Feriado_Lunes+Feriado_Otro+Feria_Flores+Madre,data=Train_D_Dataset,
method = "rpart", trControl = trcntrl,
parms = list(split = "gini"),
preProcess=c("center", "scale"),
tuneLength = 10)
caret_tree_fit_m
y_tr_pred_tree_m<-predict(caret_tree_fit_m,Train_D_Dataset[,c("Ano_v1","SEMANA","DIA_SEMANA","Semana.Santa","Feriado_Lunes","Feriado_Otro","Feria_Flores","Madre")])
mse_tr_tree_m<-mean((Train_D_Dataset$Accidentes_Graves-y_tr_pred_tree_m)^2) # calcula el mse de entrenamiento
RMSE_tr_tree_m = sqrt(mse_tr_tree_m)
mse_tr_tree_m
RMSE_tr_tree_m
y_test_pred_tree_m<-predict(caret_tree_fit_m,Test_D_Dataset[,c("Ano_v1","SEMANA","DIA_SEMANA","Semana.Santa","Feriado_Lunes","Feriado_Otro","Feria_Flores","Madre")])
mse_test_tree_m<-mean((Test_D_Dataset$Accidentes_Graves-y_test_pred_tree_m)^2) # calcula el mse de entrenamiento
RMSE_test_tree_m = sqrt(mse_test_tree_m)
mse_test_tree_m
RMSE_test_tree_m
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~Accidentes_Graves,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_tree_m,
name='Modelo tree',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes graves"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~Accidentes_Graves,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_tree_m,
name='Modelo tree',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes graves"),
legend = list(x = 0.75, y = 0.9))
trcntrl = trainControl(method="cv", number=10)
caret_tree_fit_sd = caret::train(Accidentes_Leves~Ano_v1+Ano_v1*DIA_SEMANA+SEMANA+DIA_SEMANA+Semana.Santa+Feriado_Lunes+Feriado_Otro+Feria_Flores+Madre,data=Train_D_Dataset,
method = "rpart", trControl = trcntrl,
parms = list(split = "gini"),
preProcess=c("center", "scale"),
tuneLength = 10)
caret_tree_fit_sd
y_test_pred_tree_sd<-predict(caret_tree_fit_sd,Test_D_Dataset[,c("Ano_v1","SEMANA","DIA_SEMANA","Semana.Santa","Feriado_Lunes","Feriado_Otro","Feria_Flores","Madre")])
mse_test_tree_sd<-mean((Test_D_Dataset$Accidentes_Leves-y_test_pred_tree_sd)^2) # calcula el mse de entrenamiento
RMSE_test_tree_sd = sqrt(mse_test_tree_sd)
mse_test_tree_sd
RMSE_test_tree_sd
y_tr_pred_tree_sd<-predict(caret_tree_fit_sd,Train_D_Dataset[,c("Ano_v1","SEMANA","DIA_SEMANA","Semana.Santa","Feriado_Lunes","Feriado_Otro","Feria_Flores","Madre")])
mse_tr_tree_sd<-mean((Train_D_Dataset$Accidentes_Leves-y_tr_pred_tree_sd)^2) # calcula el mse de entrenamiento
RMSE_tr_tree_sd = sqrt(mse_tr_tree_sd)
mse_tr_tree_sd
RMSE_tr_tree_sd
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~Accidentes_Leves,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_tree_sd,
name='Modelo tree',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes leves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes leves"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~Accidentes_Leves,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_tree_sd,
name='Modelo tree',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes leves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes leves"),
legend = list(x = 0.75, y = 0.9))
Tipo_de_accidentes= c("Total Accidentes","Accidentes Graves","Accidentes Leves")
RMSE_Train_tree = round(c(RMSE_tr_tree,RMSE_tr_tree_m,RMSE_tr_tree_sd), 3)
RMSE_Test_tree = round(c(RMSE_test_tree,RMSE_test_tree_m,RMSE_test_tree_sd),3)
Tabla_tree = data.frame (cbind(Tipo_de_accidentes,RMSE_Train_tree,RMSE_Test_tree))
Tabla_tree
trcntrl = trainControl(method="cv", number=10)
caret_knn_fit = caret::train(Total_Accidentes~Ano_v1+Ano_v1*DIA_SEMANA+SEMANA+DIA_SEMANA+Semana.Santa+Feriado_Lunes+Feriado_Otro+Feria_Flores+Madre, data=Train_D_Dataset,
method = "knn", trControl = trcntrl,
preProcess=c("center", "scale"),
tuneLength = 10)
summary(caret_knn_fit)
caret_knn_fit
y_tr_pred_knn<-predict(caret_knn_fit,Train_D_Dataset[,c("SEMANA","DIA_SEMANA","Semana.Santa","Feriado","Quincena","Viernes_Desp_Qincena","Viernes_Antes_Puente")])
y_tr_pred_knn<-predict(caret_knn_fit,Train_D_Dataset[,c("Ano_v1","SEMANA","DIA_SEMANA","Semana.Santa","Feriado_Lunes","Feriado_Otro","Feria_Flores","Madre")])
mse_tr_knn<-mean((Train_D_Dataset$Total_Accidentes-y_tr_pred_knn)^2) # calcula el mse de entrenamiento
RMSE_tr_knn = sqrt(mse_tr_knn)
mse_tr_knn
RMSE_tr_knn
y_test_pred_knn<-predict(caret_knn_fit,Test_D_Dataset[,c("SEMANA","DIA_SEMANA","Semana.Santa","Feriado","Quincena","Viernes_Desp_Qincena","Viernes_Antes_Puente")])
y_test_pred_knn<-predict(caret_knn_fit,Test_D_Dataset[,c("Ano_v1","SEMANA","DIA_SEMANA","Semana.Santa","Feriado_Lunes","Feriado_Otro","Feria_Flores","Madre")])
mse_test_knn<-mean((Test_D_Dataset$Total_Accidentes-y_test_pred_knn)^2) # calcula el mse de entrenamiento
RMSE_test_knn = sqrt(mse_test_knn)
mse_test_knn
RMSE_test_knn
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~Total_Accidentes,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_knn,
name='Modelo knn',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~Total_Accidentes,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_knn,
name='Modelo knn',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~Total_Accidentes,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_knn,
name='Modelo knn',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~Total_Accidentes,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_knn,
name='Modelo lm',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~Total_Accidentes,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_knn,
name='Modelo knn',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
trcntrl = trainControl(method="cv", number=10)
caret_knn_fit_m = caret::train(Accidentes_Graves~SEMANA+DIA_SEMANA+Semana.Santa+Feriado+Quincena+Viernes_Desp_Qincena+Viernes_Antes_Puente, data=Train_D_Dataset,
method = "knn", trControl = trcntrl,
preProcess=c("center", "scale"),
tuneLength = 10)
summary(caret_knn_fit_m)
caret_knn_fit_m
y_tr_pred_knn_m<-predict(caret_knn_fit_m,Train_D_Dataset[,c("SEMANA","DIA_SEMANA","Semana.Santa","Feriado","Quincena","Viernes_Desp_Qincena","Viernes_Antes_Puente")])
mse_tr_knn_m<-mean((Train_D_Dataset$Accidentes_Graves-y_tr_pred_knn_m)^2) # calcula el mse de entrenamiento
RMSE_tr_knn_m = sqrt(mse_tr_knn_m)
mse_tr_knn_m
RMSE_tr_knn_m
y_test_pred_knn_m<-predict(caret_knn_fit_m,Test_D_Dataset[,c("SEMANA","DIA_SEMANA","Semana.Santa","Feriado","Quincena","Viernes_Desp_Qincena","Viernes_Antes_Puente")])
mse_test_knn_m<-mean((Test_D_Dataset$Accidentes_Graves-y_test_pred_knn_m)^2) # calcula el mse de entrenamiento
RMSE_test_knn_m = sqrt(mse_test_knn_m)
mse_test_knn_m
RMSE_test_knn_m
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~Accidentes_Leves,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_knn_m,
name='Modelo knn',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes graves"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~Accidentes_Graves,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_knn_m,
name='Modelo knn',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes graves"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~Accidentes_Graves,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_knn_ch,
name='Modelo knn',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes graves"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~Accidentes_Graves,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_knn_m,
name='Modelo knn',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes graves"),
legend = list(x = 0.75, y = 0.9))
trcntrl = trainControl(method="cv", number=10)
caret_knn_fit_m = caret::train(Accidentes_Graves~Ano_v1+Ano_v1*DIA_SEMANA+SEMANA+DIA_SEMANA+Semana.Santa+Feriado_Lunes+Feriado_Otro+Feria_Flores+Madre, data=Train_D_Dataset,
method = "knn", trControl = trcntrl,
preProcess=c("center", "scale"),
tuneLength = 10)
summary(caret_knn_fit_m)
caret_knn_fit_m
y_tr_pred_knn_m<-predict(caret_knn_fit_m,Train_D_Dataset[,c("Ano_v1","SEMANA","DIA_SEMANA","Semana.Santa","Feriado_Lunes","Feriado_Otro","Feria_Flores","Madre")])
mse_tr_knn_m<-mean((Train_D_Dataset$Accidentes_Graves-y_tr_pred_knn_m)^2) # calcula el mse de entrenamiento
RMSE_tr_knn_m = sqrt(mse_tr_knn_m)
mse_tr_knn_m
RMSE_tr_knn_m
y_test_pred_knn_m<-predict(caret_knn_fit_m,Test_D_Dataset[,c("Ano_v1","SEMANA","DIA_SEMANA","Semana.Santa","Feriado_Lunes","Feriado_Otro","Feria_Flores","Madre")])
mse_test_knn_m<-mean((Test_D_Dataset$Accidentes_Graves-y_test_pred_knn_m)^2) # calcula el mse de entrenamiento
RMSE_test_knn_m = sqrt(mse_test_knn_m)
mse_test_knn_m
RMSE_test_knn_m
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~Accidentes_Graves,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_knn_m,
name='Modelo knn',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes graves"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~Accidentes_Graves,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_knn_m,
name='Modelo knn',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes graves"),
legend = list(x = 0.75, y = 0.9))
trcntrl = trainControl(method="cv", number=10)
caret_knn_fit_gr = caret::train(Accidentes_Leves~Ano_v1+Ano_v1*DIA_SEMANA+SEMANA+DIA_SEMANA+Semana.Santa+Feriado_Lunes+Feriado_Otro+Feria_Flores+Madre, data=Train_D_Dataset,
method = "knn", trControl = trcntrl,
preProcess=c("center", "scale"),
tuneLength = 10)
summary(caret_knn_fit_gr)
caret_knn_fit_gr
y_test_pred_knn_gr<-predict(caret_knn_fit_gr,Test_D_Dataset[,c("Ano_v1","SEMANA","DIA_SEMANA","Semana.Santa","Feriado_Lunes","Feriado_Otro","Feria_Flores","Madre")])
mse_test_knn_gr<-mean((Test_D_Dataset$Accidentes_Graves-y_test_pred_knn_gr)^2) # calcula el mse de entrenamiento
RMSE_test_knn_gr = sqrt(mse_test_knn_gr)
mse_test_knn_gr
RMSE_test_knn_gr
y_tr_pred_knn_gr<-predict(caret_knn_fit_gr,Train_D_Dataset[,c("Ano_v1","SEMANA","DIA_SEMANA","Semana.Santa","Feriado_Lunes","Feriado_Otro","Feria_Flores","Madre")])
mse_tr_knn_gr<-mean((Train_D_Dataset$Accidentes_Graves-y_tr_pred_knn_gr)^2) # calcula el mse de entrenamiento
RMSE_tr_knn_gr = sqrt(mse_tr_knn_gr)
mse_tr_knn_gr
RMSE_tr_knn_gr
trcntrl = trainControl(method="cv", number=10)
caret_knn_fit_sd = caret::train(Accidentes_Leves~Ano_v1+Ano_v1*DIA_SEMANA+SEMANA+DIA_SEMANA+Semana.Santa+Feriado_Lunes+Feriado_Otro+Feria_Flores+Madre, data=Train_D_Dataset,
method = "knn", trControl = trcntrl,
preProcess=c("center", "scale"),
tuneLength = 10)
summary(caret_knn_fit_sd)
caret_knn_fit_sd
y_tr_pred_knn_sd<-predict(caret_knn_fit_sd,Train_D_Dataset[,c("Ano_v1","SEMANA","DIA_SEMANA","Semana.Santa","Feriado_Lunes","Feriado_Otro","Feria_Flores","Madre")])
mse_tr_knn_sd<-mean((Train_D_Dataset$Accidentes_Graves-y_tr_pred_knn_sd)^2) # calcula el mse de entrenamiento
RMSE_tr_knn_sd = sqrt(mse_tr_knn_sd)
mse_tr_knn_sd
RMSE_tr_knn_sd
y_test_pred_knn_sd<-predict(caret_knn_fit_sd,Test_D_Dataset[,c("Ano_v1","SEMANA","DIA_SEMANA","Semana.Santa","Feriado_Lunes","Feriado_Otro","Feria_Flores","Madre")])
mse_test_knn_sd<-mean((Test_D_Dataset$Accidentes_Graves-y_test_pred_knn_sd)^2) # calcula el mse de entrenamiento
RMSE_test_knn_sd = sqrt(mse_test_knn_sd)
mse_test_knn_sd
RMSE_test_knn_sd
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~Accidentes_Graves,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_knn_sd,
name='Modelo knn',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes graves"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~Accidentes_Leves,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_knn_sd,
name='Modelo knn',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes graves"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~Accidentes_Leves,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_knn_sd,
name='Modelo knn',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Accidentes Graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
Tipo_de_accidentes= c("Total Accidentes","Accidentes graves","Accidentes leves")
RMSE_Train_knn = round(c(RMSE_tr_knn,RMSE_tr_knn_m,RMSE_tr_knn_sd), 3)
RMSE_Test_knn = round(c(RMSE_test_knn,RMSE_test_knn_m,RMSE_test_knn_sd),3)
Tabla_knn = data.frame (cbind(Tipo_de_accidentes,RMSE_Train_knn,RMSE_Test_knn))
Tabla_knn
trcntrl = trainControl(method="cv", number=10)
caret_rf_fit = caret::train(Total_Accidentes~Ano_v1+Ano_v1*DIA_SEMANA+SEMANA+DIA_SEMANA+Semana.Santa+Feriado_Lunes+Feriado_Otro+Feria_Flores+Madre, data=Train_D_Dataset,
method = "rf", trControl = trcntrl,
prox=TRUE,allowParallel=TRUE)
summary(caret_rf_fit)
caret_rf_fit
plot(caret_rf_fit)
y_tr_pred_rf<-predict(caret_rf_fit,Train_D_Dataset[,c("Ano_v1","SEMANA","DIA_SEMANA","Semana.Santa","Feriado_Lunes","Feriado_Otro","Feria_Flores","Madre")])
mse_tr_rf<-mean((Train_D_Dataset$Total_Accidentes-y_tr_pred_rf)^2) # calcula el mse de entrenamiento
RMSE_tr_rf = sqrt(mse_tr_rf)
mse_tr_rf
RMSE_tr_rf
y_test_pred_rf<-predict(caret_rf_fit,Test_D_Dataset[,c("Ano_v1","SEMANA","DIA_SEMANA","Semana.Santa","Feriado_Lunes","Feriado_Otro","Feria_Flores","Madre")])
mse_test_rf<-mean((Test_D_Dataset$Total_Accidentes-y_test_pred_rf)^2) # calcula el mse de entrenamiento
RMSE_test_rf = sqrt(mse_test_rf)
mse_test_rf
RMSE_test_rf
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~Total_Accidentes,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y=  ~y_test_pred_rf,
name='Modelo rf',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~Total_Accidentes,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_rf,
name='Modelo rf',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
trcntrl = trainControl(method="cv", number=10)
caret_rf_fit_m = caret::train(Accidentes_Graves~Ano_v1+Ano_v1*DIA_SEMANA+SEMANA+DIA_SEMANA+Semana.Santa+Feriado_Lunes+Feriado_Otro+Feria_Flores+Madre, data=Train_D_Dataset,
method = "rf", trControl = trcntrl,
prox=TRUE,allowParallel=TRUE)
summary(caret_rf_fit_m)
caret_rf_fit_m
plot(caret_rf_fit_m)
y_tr_pred_rf_m<-predict(caret_rf_fit_m,Train_D_Dataset[,c("Ano_v1","SEMANA","DIA_SEMANA","Semana.Santa","Feriado_Lunes","Feriado_Otro","Feria_Flores","Madre")])
mse_tr_rf_m<-mean((Train_D_Dataset$Accidentes_Graves-y_tr_pred_rf_m)^2) # calcula el mse de entrenamiento
RMSE_tr_rf_m = sqrt(mse_tr_rf_m)
mse_tr_rf_m
RMSE_tr_rf_m
y_test_pred_rf_m<-predict(caret_rf_fit_m,Test_D_Dataset[,c("Ano_v1","SEMANA","DIA_SEMANA","Semana.Santa","Feriado_Lunes","Feriado_Otro","Feria_Flores","Madre")])
mse_test_rf_m<-mean((Test_D_Dataset$Accidentes_Graves-y_test_pred_rf_m)^2) # calcula el mse de entrenamiento
RMSE_test_rf_m = sqrt(mse_test_rf_m)
mse_test_rf_m
RMSE_test_rf_m
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~Accidentes_Graves,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_rf_m,
name='Modelo rf',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes graves"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~Accidentes_Graves,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_rf_m,
name='Modelo rf',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes graves"),
legend = list(x = 0.75, y = 0.9))
trcntrl = trainControl(method="cv", number=10)
caret_rf_fit_sd = caret::train(Accidentes_Leves~Ano_v1+Ano_v1*DIA_SEMANA+SEMANA+DIA_SEMANA+Semana.Santa+Feriado_Lunes+Feriado_Otro+Feria_Flores+Madre, data=Train_D_Dataset,
method = "rf", trControl = trcntrl,
prox=TRUE,allowParallel=TRUE)
summary(caret_rf_fit_sd)
caret_rf_fit_sd
plot(caret_rf_fit_sd)
y_tr_pred_rf_sd<-predict(caret_rf_fit_sd,Train_D_Dataset[,c("Ano_v1","SEMANA","DIA_SEMANA","Semana.Santa","Feriado_Lunes","Feriado_Otro","Feria_Flores","Madre")])
mse_tr_rf_sd<-mean((Train_D_Dataset$Accidentes_Leves-y_tr_pred_rf_sd)^2) # calcula el mse de entrenamiento
RMSE_tr_rf_sd = sqrt(mse_tr_rf_sd)
mse_tr_rf_sd
RMSE_tr_rf_sd
y_test_pred_rf_sd<-predict(caret_rf_fit_sd,Test_D_Dataset[,c("Ano_v1","SEMANA","DIA_SEMANA","Semana.Santa","Feriado_Lunes","Feriado_Otro","Feria_Flores","Madre")])
mse_test_rf_sd<-mean((Test_D_Dataset$Accidentes_Leves-y_test_pred_rf_sd)^2) # calcula el mse de entrenamiento
RMSE_test_rf_sd = sqrt(mse_test_rf_sd)
mse_test_rf_sd
RMSE_test_rf_sd
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~Accidentes_Leves,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_rf_sd,
name='Modelo rf',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes leves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes leves"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~Accidentes_Leves,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_rf_sd,
name='Modelo rf',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes leves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes leves"),
legend = list(x = 0.75, y = 0.9))
Tipo_de_accidentes= c("Total Accidentes","Total Graves","Total Leves")
RMSE_Train_rf = round(c(RMSE_tr_rf,RMSE_tr_rf_m,RMSE_tr_rf_sd), 3)
RMSE_Test_rf = round(c(RMSE_test_rf,RMSE_test_rf_m,RMSE_test_rf_sd),3)
Tabla_rf = data.frame (cbind(Tipo_de_accidentes,RMSE_Train_rf,RMSE_Test_rf))
Tabla_rf
