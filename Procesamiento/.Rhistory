legend = list(x = 0.75, y = 0.9))
Tipo_de_accidentes= c("Total Accidentes","Accidentes Graves","Accidentes Leves")
RMSE_Train_glm = round(c(RMSE_tr_glm,RMSE_tr_glm_m,RMSE_tr_glm_sd), 3)
RMSE_Test_glm = round(c(RMSE_test_glm,RMSE_test_glm_m,RMSE_test_glm_sd),3)
Tabla_glm = data.frame (cbind(Tipo_de_accidentes,RMSE_Train_glm,RMSE_Test_glm))
Tabla_glm
trcntrl = trainControl(method="cv", number=10)
caret_tree_fit = caret::train(TOTAL_ACCIDENTES∼Ano_Base+Lunes+martes+viernes+sabado+Enero+Febrero+ Octubre+Feriado_Otro+Previo_feriado+Semana_Santa+Semana_Santa_Mes+Mujer+Padre+Madre+AmoryAmistad+Semana_Santa_v1+Viernes_Antes_Puente+Feria_Flores_Semana+Feria_Flores_Mes,data=Train_D_Dataset,
method = "rpart", trControl = trcntrl,
parms = list(split = "gini"),
preProcess=c("center", "scale"),
tuneLength = 10)
caret_tree_fit
y_tr_pred_tree<-predict(caret_tree_fit,Train_D_Dataset[,c("Ano_Base","Lunes","martes","viernes","sabado","Enero","Febrero","Octubre","Feriado_Otro","Previo_feriado","Semana_Santa","Semana_Santa_Mes","Mujer","Padre","Madre","AmoryAmistad","Semana_Santa_v1","Viernes_Antes_Puente","Feria_Flores_Semana","Feria_Flores_Mes")])
mse_tr_tree<-mean((Train_D_Dataset$TOTAL_ACCIDENTES-y_tr_pred_tree)^2) # calcula el mse de entrenamiento
RMSE_tr_tree = sqrt(mse_tr_tree)
mse_tr_tree
RMSE_tr_tree
y_test_pred_tree<-predict(caret_tree_fit,Test_D_Dataset[,c("Ano_Base","Lunes","martes","viernes","sabado","Enero","Febrero","Octubre","Feriado_Otro","Previo_feriado","Semana_Santa","Semana_Santa_Mes","Mujer","Padre","Madre","AmoryAmistad","Semana_Santa_v1","Viernes_Antes_Puente","Feria_Flores_Semana","Feria_Flores_Mes")])
mse_test_tree<-mean((Test_D_Dataset$TOTAL_ACCIDENTES-y_test_pred_tree)^2) # calcula el mse de entrenamiento
RMSE_test_tree = sqrt(mse_test_tree)
mse_test_tree
RMSE_test_tree
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~TOTAL_ACCIDENTES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_tree,
name='Modelo tree',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~TOTAL_ACCIDENTES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_tree,
name='Modelo tree',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
trcntrl = trainControl(method="cv", number=10)
caret_tree_fit_m = caret::train(ACCIDENTES_GRAVES∼Ano_Base+Lunes+martes+viernes+sabado+Enero+Febrero+ Octubre+Feriado_Otro+Previo_feriado+Semana_Santa+Semana_Santa_Mes+Mujer+Padre+Madre+AmoryAmistad+Semana_Santa_v1+Viernes_Antes_Puente+Feria_Flores_Semana+Feria_Flores_Mes,data=Train_D_Dataset,
method = "rpart", trControl = trcntrl,
parms = list(split = "gini"),
preProcess=c("center", "scale"),
tuneLength = 10)
caret_tree_fit_m
y_tr_pred_tree_m<-predict(caret_tree_fit_m,Train_D_Dataset[,c("Ano_Base","Lunes","martes","viernes","sabado","Enero","Febrero","Octubre","Feriado_Otro","Previo_feriado","Semana_Santa","Semana_Santa_Mes","Mujer","Padre","Madre","AmoryAmistad","Semana_Santa_v1","Viernes_Antes_Puente","Feria_Flores_Semana","Feria_Flores_Mes")])
mse_tr_tree_m<-mean((Train_D_Dataset$ACCIDENTES_GRAVES-y_tr_pred_tree_m)^2) # calcula el mse de entrenamiento
RMSE_tr_tree_m = sqrt(mse_tr_tree_m)
mse_tr_tree_m
RMSE_tr_tree_m
y_test_pred_tree_m<-predict(caret_tree_fit_m,Test_D_Dataset[,c("Ano_Base","Lunes","martes","viernes","sabado","Enero","Febrero","Octubre","Feriado_Otro","Previo_feriado","Semana_Santa","Semana_Santa_Mes","Mujer","Padre","Madre","AmoryAmistad","Semana_Santa_v1","Viernes_Antes_Puente","Feria_Flores_Semana","Feria_Flores_Mes")])
mse_test_tree_m<-mean((Test_D_Dataset$ACCIDENTES_GRAVES-y_test_pred_tree_m)^2) # calcula el mse de entrenamiento
RMSE_test_tree_m = sqrt(mse_test_tree_m)
mse_test_tree_m
RMSE_test_tree_m
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~ACCIDENTES_GRAVES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_tree_m,
name='Modelo tree',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Accidentes graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~ACCIDENTES_GRAVES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_tree_m,
name='Modelo tree',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Accidentes graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
trcntrl = trainControl(method="cv", number=10)
caret_tree_fit_sd = caret::train(ACCIDENTES_LEVES∼Ano_Base+Lunes+martes+viernes+sabado+Enero+Febrero+ Octubre+Feriado_Otro+Previo_feriado+Semana_Santa+Semana_Santa_Mes+Mujer+Padre+Madre+AmoryAmistad+Semana_Santa_v1+Viernes_Antes_Puente+Feria_Flores_Semana+Feria_Flores_Mes,data=Train_D_Dataset,
method = "rpart", trControl = trcntrl,
parms = list(split = "gini"),
preProcess=c("center", "scale"),
tuneLength = 10)
caret_tree_fit_sd
y_tr_pred_tree_sd<-predict(caret_tree_fit_sd,Train_D_Dataset[,c("Ano_Base","Lunes","martes","viernes","sabado","Enero","Febrero","Octubre","Feriado_Otro","Previo_feriado","Semana_Santa","Semana_Santa_Mes","Mujer","Padre","Madre","AmoryAmistad","Semana_Santa_v1","Viernes_Antes_Puente","Feria_Flores_Semana","Feria_Flores_Mes")])
mse_tr_tree_sd<-mean((Train_D_Dataset$ACCIDENTES_LEVES-y_tr_pred_tree_sd)^2) # calcula el mse de entrenamiento
RMSE_tr_tree_sd = sqrt(mse_tr_tree_sd)
mse_tr_tree_sd
RMSE_tr_tree_sd
y_test_pred_tree_sd<-predict(caret_tree_fit_sd,Test_D_Dataset[,c("Ano_Base","Lunes","martes","viernes","sabado","Enero","Febrero","Octubre","Feriado_Otro","Previo_feriado","Semana_Santa","Semana_Santa_Mes","Mujer","Padre","Madre","AmoryAmistad","Semana_Santa_v1","Viernes_Antes_Puente","Feria_Flores_Semana","Feria_Flores_Mes")])
mse_test_tree_sd<-mean((Test_D_Dataset$ACCIDENTES_LEVES-y_test_pred_tree_sd)^2) # calcula el mse de entrenamiento
RMSE_test_tree_sd = sqrt(mse_test_tree_sd)
mse_test_tree_sd
RMSE_test_tree_sd
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~ACCIDENTES_LEVES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_tree_sd,
name='Modelo tree',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes leves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes leves"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~ACCIDENTES_LEVES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_tree_sd,
name='Modelo tree',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes leves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes leves"),
legend = list(x = 0.75, y = 0.9))
Tipo_de_accidentes= c("Total Accidentes","Accidentes Graves","Accidentes Leves")
RMSE_Train_tree = round(c(RMSE_tr_tree,RMSE_tr_tree_m,RMSE_tr_tree_sd), 3)
RMSE_Test_tree = round(c(RMSE_test_tree,RMSE_test_tree_m,RMSE_test_tree_sd),3)
Tabla_tree = data.frame (cbind(Tipo_de_accidentes,RMSE_Train_tree,RMSE_Test_tree))
Tabla_tree
trcntrl = trainControl(method="cv", number=10)
caret_rf_fit = caret::train(TOTAL_ACCIDENTES∼Ano_Base+Lunes+martes+viernes+sabado+Enero+Febrero+ Octubre+Feriado_Otro+Previo_feriado+Semana_Santa+Semana_Santa_Mes+Mujer+Padre+Madre+AmoryAmistad+Semana_Santa_v1+Viernes_Antes_Puente+Feria_Flores_Semana+Feria_Flores_Mes, data=Train_D_Dataset,
method = "rf", trControl = trcntrl,
prox=TRUE,allowParallel=TRUE)
summary(caret_rf_fit)
caret_rf_fit
plot(caret_rf_fit)
y_tr_pred_rf<-predict(caret_rf_fit,Train_D_Dataset[,c("Ano_Base","Lunes","martes","viernes","sabado","Enero","Febrero","Octubre","Feriado_Otro","Previo_feriado","Semana_Santa","Semana_Santa_Mes","Mujer","Padre","Madre","AmoryAmistad","Semana_Santa_v1","Viernes_Antes_Puente","Feria_Flores_Semana","Feria_Flores_Mes")])
mse_tr_rf<-mean((Train_D_Dataset$TOTAL_ACCIDENTES-y_tr_pred_rf)^2) # calcula el mse de entrenamiento
RMSE_tr_rf = sqrt(mse_tr_rf)
mse_tr_rf
RMSE_tr_rf
y_test_pred_rf<-predict(caret_rf_fit,Test_D_Dataset[,c("Ano_Base","Lunes","martes","viernes","sabado","Enero","Febrero","Octubre","Feriado_Otro","Previo_feriado","Semana_Santa","Semana_Santa_Mes","Mujer","Padre","Madre","AmoryAmistad","Semana_Santa_v1","Viernes_Antes_Puente","Feria_Flores_Semana","Feria_Flores_Mes")])
mse_test_rf<-mean((Test_D_Dataset$TOTAL_ACCIDENTES-y_test_pred_rf)^2) # calcula el mse de entrenamiento
RMSE_test_rf = sqrt(mse_test_rf)
mse_test_rf
RMSE_test_rf
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~TOTAL_ACCIDENTES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_rf,
name='Modelo rf',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~TOTAL_ACCIDENTES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y=  ~y_test_pred_rf,
name='Modelo rf',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 0.75, y = 0.9))
trcntrl = trainControl(method="cv", number=10)
caret_rf_fit_m = caret::train(ACCIDENTES_GRAVES~Ano_v1+Ano_v1*DIA_SEMANA+SEMANA+DIA_SEMANA+Semana.Santa+Feriado_Lunes+Feriado_Otro+Feria_Flores+Madre, data=Train_D_Dataset,
method = "rf", trControl = trcntrl,
prox=TRUE,allowParallel=TRUE)
trcntrl = trainControl(method="cv", number=10)
caret_rf_fit_m = caret::train(ACCIDENTES_GRAVES∼Ano_Base+Lunes+martes+viernes+sabado+Enero+Febrero+ Octubre+Feriado_Otro+Previo_feriado+Semana_Santa+Semana_Santa_Mes+Mujer+Padre+Madre+AmoryAmistad+Semana_Santa_v1+Viernes_Antes_Puente+Feria_Flores_Semana+Feria_Flores_Mes, data=Train_D_Dataset,
method = "rf", trControl = trcntrl,
prox=TRUE,allowParallel=TRUE)
summary(caret_rf_fit_m)
caret_rf_fit_m
plot(caret_rf_fit_m)
y_tr_pred_rf_m<-predict(caret_rf_fit_m,Train_D_Dataset[,c("Ano_Base","Lunes","martes","viernes","sabado","Enero","Febrero","Octubre","Feriado_Otro","Previo_feriado","Semana_Santa","Semana_Santa_Mes","Mujer","Padre","Madre","AmoryAmistad","Semana_Santa_v1","Viernes_Antes_Puente","Feria_Flores_Semana","Feria_Flores_Mes")])
mse_tr_rf_m<-mean((Train_D_Dataset$ACCIDENTES_GRAVES-y_tr_pred_rf_m)^2) # calcula el mse de entrenamiento
RMSE_tr_rf_m = sqrt(mse_tr_rf_m)
mse_tr_rf_m
RMSE_tr_rf_m
y_test_pred_rf_m<-predict(caret_rf_fit_m,Test_D_Dataset[,c("Ano_Base","Lunes","martes","viernes","sabado","Enero","Febrero","Octubre","Feriado_Otro","Previo_feriado","Semana_Santa","Semana_Santa_Mes","Mujer","Padre","Madre","AmoryAmistad","Semana_Santa_v1","Viernes_Antes_Puente","Feria_Flores_Semana","Feria_Flores_Mes")])
mse_test_rf_m<-mean((Test_D_Dataset$ACCIDENTES_GRAVES-y_test_pred_rf_m)^2) # calcula el mse de entrenamiento
RMSE_test_rf_m = sqrt(mse_test_rf_m)
mse_test_rf_m
RMSE_test_rf_m
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~ACCIDENTES_GRAVES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_rf_m,
name='Modelo rf',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes graves"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~ACCIDENTES_GRAVES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_rf_m,
name='Modelo rf',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes graves"),
legend = list(x = 0.75, y = 0.9))
trcntrl = trainControl(method="cv", number=10)
caret_rf_fit_sd = caret::train(ACCIDENTES_LEVES∼Ano_Base+Lunes+martes+viernes+sabado+Enero+Febrero+ Octubre+Feriado_Otro+Previo_feriado+Semana_Santa+Semana_Santa_Mes+Mujer+Padre+Madre+AmoryAmistad+Semana_Santa_v1+Viernes_Antes_Puente+Feria_Flores_Semana+Feria_Flores_Mes, data=Train_D_Dataset,
method = "rf", trControl = trcntrl,
prox=TRUE,allowParallel=TRUE)
summary(caret_rf_fit_sd)
caret_rf_fit_sd
plot(caret_rf_fit_sd)
y_tr_pred_rf_sd<-predict(caret_rf_fit_sd,Train_D_Dataset[,c("Ano_Base","Lunes","martes","viernes","sabado","Enero","Febrero","Octubre","Feriado_Otro","Previo_feriado","Semana_Santa","Semana_Santa_Mes","Mujer","Padre","Madre","AmoryAmistad","Semana_Santa_v1","Viernes_Antes_Puente","Feria_Flores_Semana","Feria_Flores_Mes")])
mse_tr_rf_sd<-mean((Train_D_Dataset$ACCIDENTES_LEVES-y_tr_pred_rf_sd)^2) # calcula el mse de entrenamiento
RMSE_tr_rf_sd = sqrt(mse_tr_rf_sd)
mse_tr_rf_sd
RMSE_tr_rf_sd
y_test_pred_rf_sd<-predict(caret_rf_fit_sd,Test_D_Dataset[,c("Ano_Base","Lunes","martes","viernes","sabado","Enero","Febrero","Octubre","Feriado_Otro","Previo_feriado","Semana_Santa","Semana_Santa_Mes","Mujer","Padre","Madre","AmoryAmistad","Semana_Santa_v1","Viernes_Antes_Puente","Feria_Flores_Semana","Feria_Flores_Mes")])
mse_test_rf_sd<-mean((Test_D_Dataset$ACCIDENTES_LEVES-y_test_pred_rf_sd)^2) # calcula el mse de entrenamiento
RMSE_test_rf_sd = sqrt(mse_test_rf_sd)
mse_test_rf_sd
RMSE_test_rf_sd
plot_ly (data=Train_D_Dataset,
x = ~FECHA,
y = ~ACCIDENTES_LEVES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_rf_sd,
name='Modelo rf',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes leves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes leves"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=Test_D_Dataset,
x = ~FECHA,
y = ~ACCIDENTES_LEVES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_rf_sd,
name='Modelo rf',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes leves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes leves"),
legend = list(x = 0.75, y = 0.9))
Tipo_de_accidentes= c("Total Accidentes","Total Graves","Total Leves")
RMSE_Train_rf = round(c(RMSE_tr_rf,RMSE_tr_rf_m,RMSE_tr_rf_sd), 3)
RMSE_Test_rf = round(c(RMSE_test_rf,RMSE_test_rf_m,RMSE_test_rf_sd),3)
Tabla_rf = data.frame (cbind(Tipo_de_accidentes,RMSE_Train_rf,RMSE_Test_rf))
Tabla_rf
comparacion_tr<-data.frame(FECHA=Total_Dataset_Freq$FECHA[Total_Dataset_Freq$FECHA<="2017-12-31"],
ACCIDENTES=Total_Dataset_Freq$TOTAL_ACCIDENTES[Total_Dataset_Freq$FECHA<="2017-12-31"],
lm= y_tr_pred_lm,
knn= y_tr_pred_knn,
glm=y_tr_pred_glm ,
arbol=y_tr_pred_tree,
rf=y_tr_pred_rf)
plot_ly (data=comparacion_tr,
x = ~FECHA,
y = ~ACCIDENTES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~lm,
name='lm',
line=list(width=1,color= "blue"))%>%
add_trace(y= ~knn,
name='knn',
line=list(width=1,color="red"))%>%
add_trace(y= ~glm,
name='Modelo Poisson',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
add_trace(y= ~arbol,
name='Árbol',
line=list(width=1,color="green"))%>%
add_trace(y= ~rf,
name='Bosque',
line=list(width=1,color='rgb(255, 51, 153)'))%>%
layout(title='Registros RUNT (Entrenamiento)',
xaxis=list(title="Fecha"),
yaxis=list(title="Unidades"),
legend = list(x = 1, y = 0.9))
comparacion_vl<-data.frame(FECHA=Test_D_Dataset$FECHA,
ACCIDENTES=Test_D_Dataset$TOTAL_ACCIDENTES,
lm= y_test_pred_lm,
knn= y_test_pred_knn,
glm=y_test_pred_glm ,
arbol=y_test_pred_tree,
rf=y_test_pred_rf)
plot_ly (data=comparacion_vl,
x = ~FECHA,
y = ~ACCIDENTES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~lm,
name='lm',
line=list(width=1,color= "blue"))%>%
add_trace(y= ~knn,
name='knn',
line=list(width=1,color="red"))%>%
add_trace(y= ~glm,
name='Modelo Poisson',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
add_trace(y= ~arbol,
name='Árbol',
line=list(width=1,color="green"))%>%
add_trace(y= ~rf,
name='Bosque',
line=list(width=1,color='rgb(255, 51, 153)'))%>%
layout(title='Total Accidentes (Validación)',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 1, y = 0.9))
Entrenamiento<-round(c(RMSE_tr_lm,RMSE_tr_knn,RMSE_tr_glm,RMSE_tr_tree,RMSE_tr_rf,)3)
Entrenamiento<-round(c(RMSE_tr_lm,RMSE_tr_knn,RMSE_tr_glm,RMSE_tr_tree,RMSE_tr_rf)3)
Entrenamiento<-round(c(RMSE_tr_lm,RMSE_tr_knn,RMSE_tr_glm,RMSE_tr_tree,RMSE_tr_rf),3)
Validacion<-round(c(RMSE_test_lm,RMSE_test_knn,RMSE_test_glm,RMSE_test_tree,RMSE_test_rf),3)
nombres<-c("lm","knn","glm","árbol","bosque")
ResultadosRMSE<-data.frame(Entrenamiento=Entrenamiento,Validacion=Validacion)
rownames(ResultadosRMSE)<-nombres
ResultadosRMSE
comparacion_tr<-data.frame(FECHA=Total_Dataset_Freq$FECHA[Total_Dataset_Freq$FECHA<="2017-12-31"],
ACCIDENTESG=Total_Dataset_Freq$ACCIDENTES_GRAVES[Total_Dataset_Freq$FECHA<="2017-12-31"],
lm= y_tr_pred_lm_m,
knn= y_tr_pred_knn_m,
glm=y_tr_pred_glm_m,
arbol=y_tr_pred_tree_m,
rf=y_tr_pred_rf_m)
plot_ly (data=comparacion_tr,
x = ~FECHA,
y = ~ACCIDENTESG,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~lm,
name='lm-graves',
line=list(width=1,color= "blue"))%>%
add_trace(y= ~knn,
name='knn-graves',
line=list(width=1,color="red"))%>%
add_trace(y= ~glm,
name='Modelo Poisson-graves',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
add_trace(y= ~arbol,
name='Árbo-gravesl',
line=list(width=1,color="green"))%>%
add_trace(y= ~rf,
name='Bosque-graves',
line=list(width=1,color='rgb(255, 51, 153)'))%>%
layout(title='Accidentes graves (Entrenamiento)',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 1, y = 0.9))
comparacion_vl<-data.frame(FECHA=Test_D_Dataset$FECHA,
ACCIDENTESG=Test_D_Dataset$ACCIDENTES_GRAVES,
lm= y_test_pred_lm_m,
knn= y_test_pred_knn_m,
glm=y_test_pred_glm_m,
arbol=y_test_pred_tree_m,
rf=y_test_pred_rf_m)
plot_ly (data=comparacion_vl,
x = ~FECHA,
y = ~ACCIDENTESG,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~lm,
name='lm-graves',
line=list(width=1,color= "blue"))%>%
add_trace(y= ~knn,
name='knn-graves',
line=list(width=1,color="red"))%>%
add_trace(y= ~glm,
name='Modelo Poisson-graves',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
add_trace(y= ~arbol,
name='Árbol-graves',
line=list(width=1,color="green"))%>%
add_trace(y= ~rf,
name='Bosque-graves',
line=list(width=1,color='rgb(255, 51, 153)'))%>%
layout(title='Accidentes graves (Validación)',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 1, y = 0.9))
Entrenamiento<-round(c(RMSE_tr_lm_m,RMSE_tr_knn_m,RMSE_tr_glm_m,RMSE_tr_tree_m,RMSE_tr_rf_m),3)
Validacion<-round(c(RMSE_test_lm_m,RMSE_test_knn_m,RMSE_test_glm_m,RMSE_test_tree_m,RMSE_test_rf_m),3)
nombres<-c("lm","knn","glm","árbol","bosque")
ResultadosRMSE<-data.frame(Entrenamiento=Entrenamiento,Validacion=Validacion)
rownames(ResultadosRMSE)<-nombres
ResultadosRMSE
comparacion_tr<-data.frame(FECHA=Total_Dataset_Freq$FECHA[Total_Dataset_Freq$FECHA<="2017-12-31"],
ACCIDENTESL=Total_Dataset_Freq$ACCIDENTES_LEVES[Total_Dataset_Freq$FECHA<="2017-12-31"],
lm= y_tr_pred_lm_sd,
knn= y_tr_pred_knn_sd,
glm=y_tr_pred_glm_sd,
arbol=y_tr_pred_tree_sd,
rf=y_tr_pred_rf_sd)
plot_ly (data=comparacion_tr,
x = ~FECHA,
y = ~ACCIDENTESL,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~lm,
name='lm-lesves',
line=list(width=1,color= "blue"))%>%
add_trace(y= ~knn,
name='knn-leves',
line=list(width=1,color="red"))%>%
add_trace(y= ~glm-graves,
name='Modelo Poisson-leves',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
add_trace(y= ~arbol,
name='Árbo-gravesl',
line=list(width=1,color="green"))%>%
add_trace(y= ~rf,
name='Bosque-graves',
line=list(width=1,color='rgb(255, 51, 153)'))%>%
layout(title='Accidentes graves (Entrenamiento)',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 1, y = 0.9))
plot_ly (data=comparacion_tr,
x = ~FECHA,
y = ~ACCIDENTESL,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~lm,
name='lm-lesves',
line=list(width=1,color= "blue"))%>%
add_trace(y= ~knn,
name='knn-leves',
line=list(width=1,color="red"))%>%
add_trace(y= ~glm,
name='Modelo Poisson-leves',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
add_trace(y= ~arbol,
name='Árbo-leves',
line=list(width=1,color="green"))%>%
add_trace(y= ~rf,
name='Bosque-leves',
line=list(width=1,color='rgb(255, 51, 153)'))%>%
layout(title='Accidentes les (Entrenamiento)',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 1, y = 0.9))
comparacion_vl<-data.frame(FECHA=Test_D_Dataset$FECHA,
ACCIDENTESL=Test_D_Dataset$ACCIDENTES_GRAVES,
lm= y_test_pred_lm_sd,
knn= y_test_pred_knn_sd,
glm=y_test_pred_glm_sd,
arbol=y_test_pred_tree_sd,
rf=y_test_pred_rf_sd)
plot_ly (data=comparacion_vl,
x = ~FECHA,
y = ~ACCIDENTESL,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~lm,
name='lm-leves',
line=list(width=1,color= "blue"))%>%
add_trace(y= ~knn,
name='knn',
line=list(width=1,color="red"))%>%
add_trace(y= ~glm,
name='Modelo Poisson-leves',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
add_trace(y= ~arbol,
name='Árbol-leves',
line=list(width=1,color="green"))%>%
add_trace(y= ~rf,
name='Bosque-leves',
line=list(width=1,color='rgb(255, 51, 153)'))%>%
layout(title='Accidentes lesves (Validación)',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 1, y = 0.9))
Entrenamiento<-round(c(RMSE_tr_lm_sd,RMSE_tr_knn_sd,RMSE_tr_glm_sd,RMSE_tr_tree_sd,RMSE_tr_rf_sd),3)
Validacion<-round(c(RMSE_test_lm_sd,RMSE_test_knn_sd,RMSE_test_glm_sd,RMSE_test_tree_sd,RMSE_test_rf_sd),3)
Porcetaje<-round(C((((RMSE_test_lm_sd-RMSE_tr_lm_sd)/RMSE_tr_lm_sd)*100),(((RMSE_test_lm_sd-RMSE_tr_lm_sd)/RMSE_tr_lm_sd)*100),(((RMSE_test_lm_sd-RMSE_tr_lm_sd)/RMSE_tr_lm_sd)*100),(((RMSE_test_lm_sd-RMSE_tr_lm_sd)/RMSE_tr_lm_sd)*100),(((RMSE_test_lm_sd-RMSE_tr_lm_sd)/RMSE_tr_lm_sd)*100),))
