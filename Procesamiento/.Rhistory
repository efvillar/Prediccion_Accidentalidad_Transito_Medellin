plot_ly (data=Train_M_Dataset ,
x = ~Ano_mes,
y = ~ACCIDENTES_LEVES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_glm_m_sd,
name='Modelo glm',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes leves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes leves"),
legend = list(x = 1, y = 0.4))
plot_ly (data=Test_M_Dataset,
x = ~Ano_mes,
y = ~ACCIDENTES_LEVES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_glm_m_sd,
name='Modelo glm',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total Accidentes leves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes leves"),
legend = list(x = 1, y = 0.4))
Tipo_de_accidentes= c("Total Accidentes","Accidentes Graves","Accidentes Leves")
RMSE_Train_glm = round(c(RMSE_tr_glm_m,RMSE_tr_glm_m_m,RMSE_tr_glm_m_sd), 3)
RMSE_Test_glm = round(c(RMSE_test_glm_m,RMSE_test_glm_m_m,RMSE_test_glm_m_sd),3)
Tabla_glm = data.frame (cbind(Tipo_de_accidentes,RMSE_Train_glm,RMSE_Test_glm))
Tabla_glm
trcntrl = trainControl(method="cv", number=10)
caret_tree_fit_m = caret::train(TOTAL_ACCIDENTES∼Ano_Base+MES+Feriados+Freq_viernes+Feriados_Lunes,data=Train_M_Dataset ,
method = "rpart", trControl = trcntrl,
parms = list(split = "gini"),
preProcess=c("center", "scale"),
tuneLength = 10)
caret_tree_fit_m
y_tr_pred_tree_m<-predict(caret_tree_fit_m,Train_M_Dataset [,c("Ano_Base","MES","Feriados","Freq_viernes","Feriados_Lunes")])
mse_tr_tree_m<-mean((Train_M_Dataset $TOTAL_ACCIDENTES-y_tr_pred_tree_m)^2) # calcula el mse de entrenamiento
RMSE_tr_tree_m = sqrt(mse_tr_tree_m)
mse_tr_tree_m
RMSE_tr_tree_m
y_test_pred_tree_m<-predict(caret_tree_fit_m,Test_M_Dataset[,c("Ano_Base","MES","Feriados","Freq_viernes","Feriados_Lunes")])
mse_test_tree_m<-mean((Test_M_Dataset$TOTAL_ACCIDENTES-y_test_pred_tree_m)^2) # calcula el mse de entrenamiento
RMSE_test_tree_m = sqrt(mse_test_tree_m)
mse_test_tree_m
RMSE_test_tree_m
plot_ly (data=Train_M_Dataset ,
x = ~Ano_mes,
y = ~TOTAL_ACCIDENTES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_tree_m,
name='Modelo tree',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 1, y = 0.4))
plot_ly (data=Test_M_Dataset,
x = ~Ano_mes,
y = ~TOTAL_ACCIDENTES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_tree_m,
name='Modelo tree',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 1, y = 0.4))
trcntrl = trainControl(method="cv", number=10)
caret_tree_fit_m_m = caret::train(ACCIDENTES_GRAVES∼Ano_Base+MES+Feriados+Freq_viernes+Feriados_Lunes,data=Train_M_Dataset ,
method = "rpart", trControl = trcntrl,
parms = list(split = "gini"),
preProcess=c("center", "scale"),
tuneLength = 10)
caret_tree_fit_m_m
y_tr_pred_tree_m_m<-predict(caret_tree_fit_m_m,Train_M_Dataset [,c("Ano_Base","MES","Feriados","Freq_viernes","Feriados_Lunes")])
mse_tr_tree_m_m<-mean((Train_M_Dataset $ACCIDENTES_GRAVES-y_tr_pred_tree_m_m)^2) # calcula el mse de entrenamiento
RMSE_tr_tree_m_m = sqrt(mse_tr_tree_m_m)
mse_tr_tree_m_m
RMSE_tr_tree_m_m
y_test_pred_tree_m_m<-predict(caret_tree_fit_m_m,Test_M_Dataset[,c("Ano_Base","MES","Feriados","Freq_viernes","Feriados_Lunes")])
mse_test_tree_m_m<-mean((Test_M_Dataset$ACCIDENTES_GRAVES-y_test_pred_tree_m_m)^2) # calcula el mse de entrenamiento
RMSE_test_tree_m_m = sqrt(mse_test_tree_m_m)
mse_test_tree_m_m
RMSE_test_tree_m_m
plot_ly (data=Train_M_Dataset ,
x = ~Ano_mes,
y = ~ACCIDENTES_GRAVES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_tree_m_m,
name='Modelo tree',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Accidentes graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 1, y = 0.4))
plot_ly (data=Test_M_Dataset,
x = ~Ano_mes,
y = ~ACCIDENTES_GRAVES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_tree_m_m,
name='Modelo tree',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Accidentes graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 1, y = 0.4))
trcntrl = trainControl(method="cv", number=10)
caret_tree_fit_m_sd = caret::train(ACCIDENTES_LEVES∼Ano_Base+MES+Feriados+Freq_viernes+Feriados_Lunes,data=Train_M_Dataset ,
method = "rpart", trControl = trcntrl,
parms = list(split = "gini"),
preProcess=c("center", "scale"),
tuneLength = 10)
caret_tree_fit_m_sd
y_tr_pred_tree_m_sd<-predict(caret_tree_fit_m_sd,Train_M_Dataset [,c("Ano_Base","MES","Feriados","Freq_viernes","Feriados_Lunes")])
mse_tr_tree_m_sd<-mean((Train_M_Dataset $ACCIDENTES_LEVES-y_tr_pred_tree_m_sd)^2) # calcula el mse de entrenamiento
RMSE_tr_tree_m_sd = sqrt(mse_tr_tree_m_sd)
mse_tr_tree_m_sd
RMSE_tr_tree_m_sd
y_test_pred_tree_m_sd<-predict(caret_tree_fit_m_sd,Test_M_Dataset[,c("Ano_Base","MES","Feriados","Freq_viernes","Feriados_Lunes")])
mse_test_tree_m_sd<-mean((Test_M_Dataset$ACCIDENTES_LEVES-y_test_pred_tree_m_sd)^2) # calcula el mse de entrenamiento
RMSE_test_tree_m_sd = sqrt(mse_test_tree_m_sd)
mse_test_tree_m_sd
RMSE_test_tree_m_sd
plot_ly (data=Train_M_Dataset ,
x = ~Ano_mes,
y = ~ACCIDENTES_LEVES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_tree_m_sd,
name='Modelo tree',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes leves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes leves"),
legend = list(x = 1, y = 0.4))
plot_ly (data=Test_M_Dataset,
x = ~Ano_mes,
y = ~ACCIDENTES_LEVES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_tree_m_sd,
name='Modelo tree',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes leves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes leves"),
legend = list(x = 1, y = 0.4))
Tipo_de_accidentes= c("Total Accidentes","Accidentes Graves","Accidentes Leves")
RMSE_Train_tree = round(c(RMSE_tr_tree_m,RMSE_tr_tree_m_m,RMSE_tr_tree_m_sd), 3)
RMSE_Test_tree = round(c(RMSE_test_tree_m,RMSE_test_tree_m_m,RMSE_test_tree_m_sd),3)
Tabla_tree = data.frame (cbind(Tipo_de_accidentes,RMSE_Train_tree,RMSE_Test_tree))
Tabla_tree
trcntrl = trainControl(method="cv", number=10)
caret_rf_fit_s = caret::train(TOTAL_ACCIDENTES∼Ano_Base+MES+Feriados+Freq_viernes+Feriados_Lunes, data=Train_M_Dataset ,
method = "rf", trControl = trcntrl,
prox=TRUE,allowParallel=TRUE)
summary(caret_rf_fit_s)
caret_rf_fit_s
plot(caret_rf_fit_s)
y_tr_pred_rf_s<-predict(caret_rf_fit_s,Train_M_Dataset [,c("Ano_Base","MES","Feriados","Freq_viernes","Feriados_Lunes")])
mse_tr_rf_s<-mean((Train_M_Dataset $TOTAL_ACCIDENTES-y_tr_pred_rf_s)^2) # calcula el mse de entrenamiento
RMSE_tr_rf_s = sqrt(mse_tr_rf_s)
mse_tr_rf_s
RMSE_tr_rf_s
y_test_pred_rf_s<-predict(caret_rf_fit_s,Test_M_Dataset[,c("Ano_Base","MES","Feriados","Freq_viernes","Feriados_Lunes")])
mse_test_rf_s<-mean((Test_M_Dataset$TOTAL_ACCIDENTES-y_test_pred_rf_s)^2) # calcula el mse de entrenamiento
RMSE_test_rf_s = sqrt(mse_test_rf_s)
mse_test_rf_s
RMSE_test_rf_s
plot_ly (data=Train_M_Dataset ,
x = ~Ano_mes,
y = ~TOTAL_ACCIDENTES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_rf_s,
name='Modelo rf',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 1, y = 0.4))
plot_ly (data=Test_M_Dataset,
x = ~Ano_mes,
y = ~TOTAL_ACCIDENTES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y=  ~y_test_pred_rf_s,
name='Modelo rf',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 1, y = 0.4))
trcntrl = trainControl(method="cv", number=10)
caret_rf_fit_s_m = caret::train(ACCIDENTES_GRAVES∼Ano_Base+MES+Feriados+Freq_viernes+Feriados_Lunes, data=Train_M_Dataset ,
method = "rf", trControl = trcntrl,
prox=TRUE,allowParallel=TRUE)
summary(caret_rf_fit_s_m)
caret_rf_fit_s_m
plot(caret_rf_fit_s_m)
y_tr_pred_rf_s_m<-predict(caret_rf_fit_s_m,Train_M_Dataset [,c("Ano_Base","MES","Feriados","Freq_viernes","Feriados_Lunes")])
mse_tr_rf_s_m<-mean((Train_M_Dataset $ACCIDENTES_GRAVES-y_tr_pred_rf_s_m)^2) # calcula el mse de entrenamiento
RMSE_tr_rf_s_m = sqrt(mse_tr_rf_s_m)
mse_tr_rf_s_m
RMSE_tr_rf_s_m
y_test_pred_rf_s_m<-predict(caret_rf_fit_s_m,Test_M_Dataset[,c("Ano_Base","MES","Feriados","Freq_viernes","Feriados_Lunes")])
mse_test_rf_s_m<-mean((Test_M_Dataset$ACCIDENTES_GRAVES-y_test_pred_rf_s_m)^2) # calcula el mse de entrenamiento
RMSE_test_rf_s_m = sqrt(mse_test_rf_s_m)
mse_test_rf_s_m
RMSE_test_rf_s_m
plot_ly (data=Train_M_Dataset ,
x = ~Ano_mes,
y = ~ACCIDENTES_GRAVES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_rf_s_m,
name='Modelo rf',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes graves"),
legend = list(x = 1, y = 0.4))
plot_ly (data=Test_M_Dataset,
x = ~Ano_mes,
y = ~ACCIDENTES_GRAVES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_rf_s_m,
name='Modelo rf',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes graves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes graves"),
legend = list(x = 1, y = 0.4))
trcntrl = trainControl(method="cv", number=10)
caret_rf_fit_s_sd = caret::train(ACCIDENTES_LEVES∼Ano_Base+MES+Feriados+Freq_viernes+Feriados_Lunes, data=Train_M_Dataset ,
method = "rf", trControl = trcntrl,
prox=TRUE,allowParallel=TRUE)
summary(caret_rf_fit_s_sd)
caret_rf_fit_s_sd
plot(caret_rf_fit_s_sd)
y_tr_pred_rf_s_sd<-predict(caret_rf_fit_s_sd,Train_M_Dataset [,c("Ano_Base","MES","Feriados","Freq_viernes","Feriados_Lunes")])
mse_tr_rf_s_sd<-mean((Train_M_Dataset $ACCIDENTES_LEVES-y_tr_pred_rf_s_sd)^2) # calcula el mse de entrenamiento
RMSE_tr_rf_s_sd = sqrt(mse_tr_rf_s_sd)
mse_tr_rf_s_sd
RMSE_tr_rf_s_sd
y_test_pred_rf_s_sd<-predict(caret_rf_fit_s_sd,Test_M_Dataset[,c("Ano_Base","MES","Feriados","Freq_viernes","Feriados_Lunes")])
mse_test_rf_s_sd<-mean((Test_M_Dataset$ACCIDENTES_LEVES-y_test_pred_rf_s_sd)^2) # calcula el mse de entrenamiento
RMSE_test_rf_s_sd = sqrt(mse_test_rf_s_sd)
mse_test_rf_s_sd
RMSE_test_rf_s_sd
plot_ly (data=Train_M_Dataset ,
x = ~Ano_mes,
y = ~ACCIDENTES_LEVES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_tr_pred_rf_s_sd,
name='Modelo rf',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes leves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes leves"),
legend = list(x = 1, y = 0.4))
plot_ly (data=Test_M_Dataset,
x = ~Ano_mes,
y = ~ACCIDENTES_LEVES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~y_test_pred_rf_s_sd,
name='Modelo rf',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
layout(title='Total accidentes leves',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes leves"),
legend = list(x = 1, y = 0.4))
Tipo_de_accidentes= c("Total Accidentes","Total Graves","Total Leves")
RMSE_Train_rf = round(c(RMSE_tr_rf_s,RMSE_tr_rf_s_m,RMSE_tr_rf_s_sd), 3)
RMSE_Test_rf = round(c(RMSE_test_rf_s,RMSE_test_rf_s_m,RMSE_test_rf_s_sd),3)
Tabla_rf = data.frame (cbind(Tipo_de_accidentes,RMSE_Train_rf,RMSE_Test_rf))
Tabla_rf
comparacion_tr<-data.frame(Ano_mes=Total_Dataset_Freq_M$Ano_mes[Total_Dataset_Freq_M$Ano_mes<="2017_52"],
ACCIDENTES=Total_Dataset_Freq_M$TOTAL_ACCIDENTES[Total_Dataset_Freq_M$Ano_mes<="2017_52"],
lm= y_tr_pred_lm_m,
knn= y_tr_pred_knn_m,
glm=y_tr_pred_glm_m ,
arbol=y_tr_pred_tree_m,
rf=y_tr_pred_rf_s)
plot_ly (data=comparacion_tr,
x = ~Ano_mes,
y = ~ACCIDENTES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~lm,
name='lm',
line=list(width=1,color= "blue"))%>%
add_trace(y= ~knn,
name='knn',
line=list(width=1,color="red"))%>%
add_trace(y= ~glm,
name='Modelo Poisson',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
add_trace(y= ~arbol,
name='Árbol',
line=list(width=1,color="green"))%>%
add_trace(y= ~rf,
name='Bosque',
line=list(width=1,color='rgb(255, 51, 153)'))%>%
layout(title='Total Accidentes (Entrenamiento)',
xaxis=list(title="Fecha"),
yaxis=list(title="Unidades"),
legend = list(x = 1, y = 0.9))
comparacion_vl<-data.frame(Ano_mes=Test_M_Dataset$Ano_mes,
ACCIDENTES=Test_M_Dataset$TOTAL_ACCIDENTES,
lm= y_test_pred_lm_m,
knn= y_test_pred_knn_m,
glm=y_test_pred_glm_m ,
arbol=y_test_pred_tree_m,
rf=y_test_pred_rf_s)
plot_ly (data=comparacion_vl,
x = ~Ano_mes,
y = ~ACCIDENTES,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~lm,
name='lm',
line=list(width=1,color= "blue"))%>%
add_trace(y= ~knn,
name='knn',
line=list(width=1,color="red"))%>%
add_trace(y= ~glm,
name='Modelo Poisson',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
add_trace(y= ~arbol,
name='Árbol',
line=list(width=1,color="green"))%>%
add_trace(y= ~rf,
name='Bosque',
line=list(width=1,color='rgb(255, 51, 153)'))%>%
layout(title='Total Accidentes (Validación)',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 1, y = 0.9))
Entrenamiento<-round(c(RMSE_tr_lm_m,RMSE_tr_knn_m,RMSE_tr_glm_m,RMSE_tr_tree_m,RMSE_tr_rf_s),3)
Validacion<-round(c(RMSE_test_lm_m,RMSE_test_knn_m,RMSE_test_glm_m,RMSE_test_tree_m,RMSE_test_rf_s),3)
nombres<-c("lm","knn","glm","árbol","bosque")
ResultadosRMSE<-data.frame(Entrenamiento=Entrenamiento,Validacion=Validacion)
rownames(ResultadosRMSE)<-nombres
ResultadosRMSE$Por_variacion<-((ResultadosRMSE$Validacion-ResultadosRMSE$Entrenamiento)/ResultadosRMSE$Entrenamiento)*100
ResultadosRMSE
comparacion_tr<-data.frame(Ano_mes=Total_Dataset_Freq_M$Ano_mes[Total_Dataset_Freq_M$Ano_mes<="2017_52"],
ACCIDENTESG=Total_Dataset_Freq_M$ACCIDENTES_GRAVES[Total_Dataset_Freq_M$Ano_mes<="2017_52"],
lm= y_tr_pred_lm_m_m,
knn= y_tr_pred_knn_m_m,
glm=y_tr_pred_glm_m_m,
arbol=y_tr_pred_tree_m_m,
rf=y_tr_pred_rf_s_m)
plot_ly (data=comparacion_tr,
x = ~Ano_mes,
y = ~ACCIDENTESG,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~lm,
name='lm-graves',
line=list(width=1,color= "blue"))%>%
add_trace(y= ~knn,
name='knn-graves',
line=list(width=1,color="red"))%>%
add_trace(y= ~glm,
name='Modelo Poisson-graves',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
add_trace(y= ~arbol,
name='Árbo-gravesl',
line=list(width=1,color="green"))%>%
add_trace(y= ~rf,
name='Bosque-graves',
line=list(width=1,color='rgb(255, 51, 153)'))%>%
layout(title='Accidentes graves (Entrenamiento)',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 1, y = 0.9))
comparacion_vl<-data.frame(Ano_mes=Test_M_Dataset$Ano_mes,
ACCIDENTESG=Test_M_Dataset$ACCIDENTES_GRAVES,
lm= y_test_pred_lm_m_m,
knn= y_test_pred_knn_m_m,
glm=y_test_pred_glm_m_m,
arbol=y_test_pred_tree_m_m,
rf=y_test_pred_rf_s_m)
plot_ly (data=comparacion_vl,
x = ~Ano_mes,
y = ~ACCIDENTESG,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~lm,
name='lm-graves',
line=list(width=1,color= "blue"))%>%
add_trace(y= ~knn,
name='knn-graves',
line=list(width=1,color="red"))%>%
add_trace(y= ~glm,
name='Modelo Poisson-graves',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
add_trace(y= ~arbol,
name='Árbol-graves',
line=list(width=1,color="green"))%>%
add_trace(y= ~rf,
name='Bosque-graves',
line=list(width=1,color='rgb(255, 51, 153)'))%>%
layout(title='Accidentes graves (Validación)',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 1, y = 0.9))
Entrenamiento<-round(c(RMSE_tr_lm_m_m,RMSE_tr_knn_m_m,RMSE_tr_glm_m_m,RMSE_tr_tree_m_m,RMSE_tr_rf_s_m),3)
Validacion<-round(c(RMSE_test_lm_m_m,RMSE_test_knn_m_m,RMSE_test_glm_m_m,RMSE_test_tree_m_m,RMSE_test_rf_s_m),3)
nombres<-c("lm","knn","glm","árbol","bosque")
ResultadosRMSE<-data.frame(Entrenamiento=Entrenamiento,Validacion=Validacion)
rownames(ResultadosRMSE)<-nombres
ResultadosRMSE$Variacion<-((ResultadosRMSE$Validacion-ResultadosRMSE$Entrenamiento)/ResultadosRMSE$Entrenamiento)*100
ResultadosRMSE
comparacion_tr<-data.frame(Ano_mes=Total_Dataset_Freq_M$Ano_mes[Total_Dataset_Freq_M$Ano_mes<="2017_52"],
ACCIDENTESL=Total_Dataset_Freq_M$ACCIDENTES_LEVES[Total_Dataset_Freq_M$Ano_mes<="2017_52"],
lm= y_tr_pred_lm_m_sd,
knn= y_tr_pred_knn_m_sd,
glm=y_tr_pred_glm_m_sd,
arbol=y_tr_pred_tree_m_sd,
rf=y_tr_pred_rf_s_sd)
plot_ly (data=comparacion_tr,
x = ~Ano_mes,
y = ~ACCIDENTESL,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~lm,
name='lm-lesves',
line=list(width=1,color= "blue"))%>%
add_trace(y= ~knn,
name='knn-leves',
line=list(width=1,color="red"))%>%
add_trace(y= ~glm,
name='Modelo Poisson-leves',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
add_trace(y= ~arbol,
name='Árbo-leves',
line=list(width=1,color="green"))%>%
add_trace(y= ~rf,
name='Bosque-leves',
line=list(width=1,color='rgb(255, 51, 153)'))%>%
layout(title='Accidentes les (Entrenamiento)',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 1, y = 0.9))
comparacion_vl<-data.frame(Ano_mes=Test_M_Dataset$Ano_mes,
ACCIDENTESL=Test_M_Dataset$ACCIDENTES_GRAVES,
lm= y_test_pred_lm_m_sd,
knn= y_test_pred_knn_m_sd,
glm=y_test_pred_glm_m_sd,
arbol=y_test_pred_tree_m_sd,
rf=y_test_pred_rf_s_sd)
plot_ly (data=comparacion_vl,
x = ~Ano_mes,
y = ~ACCIDENTESL,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(205, 12, 24)'))%>%
add_trace(y= ~lm,
name='lm-leves',
line=list(width=1,color= "blue"))%>%
add_trace(y= ~knn,
name='knn',
line=list(width=1,color="red"))%>%
add_trace(y= ~glm,
name='Modelo Poisson-leves',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
add_trace(y= ~arbol,
name='Árbol-leves',
line=list(width=1,color="green"))%>%
add_trace(y= ~rf,
name='Bosque-leves',
line=list(width=1,color='rgb(255, 51, 153)'))%>%
layout(title='Accidentes lesves (Validación)',
xaxis=list(title="Fecha"),
yaxis=list(title="Accidentes"),
legend = list(x = 1, y = 0.9))
Entrenamiento<-round(c(RMSE_tr_lm_m_sd,RMSE_tr_knn_m_sd,RMSE_tr_glm_m_sd,RMSE_tr_tree_m_sd,RMSE_tr_rf_s_sd),3)
Validacion<-round(c(RMSE_test_lm_m_sd,RMSE_test_knn_m_sd,RMSE_test_glm_m_sd,RMSE_test_tree_m_sd,RMSE_test_rf_s_sd),3)
nombres<-c("lm","knn","glm","árbol","bosque")
ResultadosRMSE<-data.frame(Entrenamiento=Entrenamiento,Validacion=Validacion)
rownames(ResultadosRMSE)<-nombres
ResultadosRMSE$Variacion<-((ResultadosRMSE$Validacion-ResultadosRMSE$Entrenamiento)/ResultadosRMSE$Entrenamiento)*100
ResultadosRMSE
