library(shiny); runApp('Transito.R')
library(shiny)
ui<-fluidPage(
titlePanel("Proyeccion Acidentes de transito Medellín"),
sidebarLayout(
sidebarPanel("Seleccione el rango a estimar",
selectInput('accion',
label = 'Tipo de Accidente',
choices = c("Total"="T", "Choque"="C",
"Otro"="O")),
dateInput(inputId="fecha_desde", label="Desde la fecha",
language= "es", width = "40%", value = "2017-01-01"),
dateInput(inputId="fecha_hasta", label="Hasta la fecha",
language= "es", width = "40%", value = "2017-08-18")
),
mainPanel("GrÃ¡fico de Acciones del Mercado de Valores Americano",
h1('GrÃ¡ficos de Precios'),
p('A continuaciÃ³n se muestra la grÃ¡fica del precio de la acciÃ³n seleccionada.'),
plotOutput('grafico'))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
# x    <- faithful[, 2]
#bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
#hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Transito.R')
runApp('Transito.R')
library(shiny)
ui<-fluidPage(
titlePanel("Proyeccion Acidentes de transito Medellín"),
sidebarLayout(
sidebarPanel("Seleccione el rango a estimar",
selectInput('accion',
label = 'Tipo de Accidente',
choices = c("Total"="T", "Choque"="C",
"Otro"="O")),
dateInput(inputId="fecha_desde", label="Desde la fecha",
language= "es", width = "40%", value = "2017-01-01"),
dateInput(inputId="fecha_hasta", label="Hasta la fecha",
language= "es", width = "40%", value = "2017-08-18")
),
mainPanel("GrÃ¡fico de Acciones del Mercado de Valores Americano",
h1('GrÃ¡ficos de Precios'),
p('A continuaciÃ³n se muestra la grÃ¡fica del precio de la acciÃ³n seleccionada.'),
plotOutput('grafico'))
)
)
# Define server logic required to draw a histogram
server<-function(input, output) {
stockdata <- reactive({
getSymbols(input$accion, src="yahoo", from = input$fechadesde,
to = input$fechahasta, auto.assign = FALSE)
})
output$grafico <- renderPlot({
chartSeries(stockdata(), name = input$accion, type = input$tipo, theme = input$tema)
})
}
shinyApp(ui=ui, server=server)
runApp('Transito.R')
runApp('Transito.R')
runApp('Transito.R')
library(shiny)
library(quantmod)
ui<-fluidPage(
titlePanel("Proyeccion Acidentes de transito Medellín"),
sidebarLayout(
sidebarPanel("Seleccione el rango a estimar",
selectInput('accion',
label = 'Tipo de Accidente',
choices = c("Total"="T", "Choque"="C",
"Otro"="O")),
dateInput(inputId="fecha_desde", label="Desde la fecha",
language= "es", width = "40%", value = "2017-01-01"),
dateInput(inputId="fecha_hasta", label="Hasta la fecha",
language= "es", width = "40%", value = "2017-08-18")
),
mainPanel("GrÃ¡fico de Acciones del Mercado de Valores Americano",
h1('GrÃ¡ficos de Precios'),
p('A continuaciÃ³n se muestra la grÃ¡fica del precio de la acciÃ³n seleccionada.'),
plotOutput('grafico'))
)
)
library(shiny)
library(quantmod)
install.packages("quantmod")
library(shiny)
library(quantmod)
ui<-fluidPage(
titlePanel("Proyeccion Acidentes de transito Medellín"),
sidebarLayout(
sidebarPanel("Seleccione el rango a estimar",
selectInput('accion',
label = 'Tipo de Accidente',
choices = c("Total"="T", "Choque"="C",
"Otro"="O")),
dateInput(inputId="fecha_desde", label="Desde la fecha",
language= "es", width = "40%", value = "2017-01-01"),
dateInput(inputId="fecha_hasta", label="Hasta la fecha",
language= "es", width = "40%", value = "2017-08-18")
),
mainPanel("GrÃ¡fico de Acciones del Mercado de Valores Americano",
h1('GrÃ¡ficos de Precios'),
p('A continuaciÃ³n se muestra la grÃ¡fica del precio de la acciÃ³n seleccionada.'),
plotOutput('grafico'))
)
)
# Define server logic required to draw a histogram
server<-function(input, output) {
stockdata <- reactive({
getSymbols(input$accion, src="yahoo", from = input$fechadesde,
to = input$fechahasta, auto.assign = FALSE)
})
output$grafico <- renderPlot({
chartSeries(stockdata(), name = input$accion, type = input$tipo, theme = input$tema)
})
}
shinyApp(ui=ui, server=server)
runApp('Acciones_Fecha.R')
runApp('Transito.R')
library(shiny)
library(quantmod)
ui<-fluidPage(
titlePanel("Proyeccion Acidentes de transito Medellín"),
sidebarLayout(
sidebarPanel("Seleccione el rango a estimar",
selectInput('accion',
label = 'Tipo de Accidente',
choices = c("Total"="T", "Choque"="C",
"Otro"="O")),
dateInput(inputId="fecha_desde", label="Desde la fecha",
language= "es", width = "40%", value = "2017-01-01"),
dateInput(inputId="fecha_hasta", label="Hasta la fecha",
language= "es", width = "40%", value = "2017-08-18")
),
mainPanel("GrÃ¡fico de Acciones del Mercado de Valores Americano",
h1('GrÃ¡ficos de Precios'),
p('A continuaciÃ³n se muestra la grÃ¡fica del precio de la acciÃ³n seleccionada.'),
plotOutput('grafico'))
)
)
# Define server logic required to draw a histogram
server<-function(input, output) {
stockdata <- reactive({
getSymbols(input$accion, src="yahoo", from = input$fechadesde,
to = input$fechahasta, auto.assign = FALSE)
})
output$grafico <- renderPlot({
chartSeries(stockdata(), name = input$accion, type = input$tipo, theme = input$tema)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
ui <- fluidPage(
titlePanel("Regression Model (Dataset: Swiss)"),
sidebarLayout(
sidebarPanel(
selectInput("outcome", label = h3("Outcome"),
choices = list("Fertility" = "Fertility",
"Agriculture" = "Agriculture",
"Examination" = "Examination",
"Education" = "Education",
"Catholic" = "Catholic",
"Infant.Mortality" = "Infant.Mortality"), selected = 1),
selectInput("indepvar", label = h3("Explanatory variable"),
choices = list("Fertility" = "Fertility",
"Agriculture" = "Agriculture",
"Examination" = "Examination",
"Education" = "Education",
"Catholic" = "Catholic",
"Infant.Mortality" = "Infant.Mortality"), selected = 1)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Scatterplot", plotOutput("scatterplot")), # Plot
tabPanel("Distribution", # Plots of distributions
fluidRow(
column(6, plotOutput("distribution1")),
column(6, plotOutput("distribution2")))
),
tabPanel("Model Summary", verbatimTextOutput("summary")), # Regression output
tabPanel("Data", DT::dataTableOutput('tbl')) # Data as datatable
)
)
))
# SERVER
server <- function(input, output) {
# Regression output
output$summary <- renderPrint({
fit <- lm(swiss[,input$outcome] ~ swiss[,input$indepvar])
names(fit$coefficients) <- c("Intercept", input$var2)
summary(fit)
})
# Data output
output$tbl = DT::renderDataTable({
DT::datatable(swiss, options = list(lengthChange = FALSE))
})
# Scatterplot output
output$scatterplot <- renderPlot({
plot(swiss[,input$indepvar], swiss[,input$outcome], main="Scatterplot",
xlab=input$indepvar, ylab=input$outcome, pch=19)
abline(lm(swiss[,input$outcome] ~ swiss[,input$indepvar]), col="red")
lines(lowess(swiss[,input$indepvar],swiss[,input$outcome]), col="blue")
}, height=400)
# Histogram output var 1
output$distribution1 <- renderPlot({
hist(swiss[,input$outcome], main="", xlab=input$outcome)
}, height=300, width=300)
# Histogram output var 2
output$distribution2 <- renderPlot({
hist(swiss[,input$indepvar], main="", xlab=input$indepvar)
}, height=300, width=300)
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("Regression Model (Dataset: Swiss)"),
sidebarLayout(
sidebarPanel(
selectInput("outcome", label = h3("Outcome"),
choices = list("Fertility" = "Fertility",
"Agriculture" = "Agriculture",
"Examination" = "Examination",
"Education" = "Education",
"Catholic" = "Catholic",
"Infant.Mortality" = "Infant.Mortality"), selected = 1),
selectInput("indepvar", label = h3("Explanatory variable"),
choices = list("Fertility" = "Fertility",
"Agriculture" = "Agriculture",
"Examination" = "Examination",
"Education" = "Education",
"Catholic" = "Catholic",
"Infant.Mortality" = "Infant.Mortality"), selected = 1)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Scatterplot", plotOutput("scatterplot")), # Plot
tabPanel("Distribution", # Plots of distributions
fluidRow(
column(6, plotOutput("distribution1")),
column(6, plotOutput("distribution2")))
),
tabPanel("Model Summary", verbatimTextOutput("summary")), # Regression output
tabPanel("Data", DT::dataTableOutput('tbl')) # Data as datatable
)
)
))
install.packages("DT")
library(shiny)
ui <- fluidPage(
titlePanel("Regression Model (Dataset: Swiss)"),
sidebarLayout(
sidebarPanel(
selectInput("outcome", label = h3("Outcome"),
choices = list("Fertility" = "Fertility",
"Agriculture" = "Agriculture",
"Examination" = "Examination",
"Education" = "Education",
"Catholic" = "Catholic",
"Infant.Mortality" = "Infant.Mortality"), selected = 1),
selectInput("indepvar", label = h3("Explanatory variable"),
choices = list("Fertility" = "Fertility",
"Agriculture" = "Agriculture",
"Examination" = "Examination",
"Education" = "Education",
"Catholic" = "Catholic",
"Infant.Mortality" = "Infant.Mortality"), selected = 1)
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Scatterplot", plotOutput("scatterplot")), # Plot
tabPanel("Distribution", # Plots of distributions
fluidRow(
column(6, plotOutput("distribution1")),
column(6, plotOutput("distribution2")))
),
tabPanel("Model Summary", verbatimTextOutput("summary")), # Regression output
tabPanel("Data", DT::dataTableOutput('tbl')) # Data as datatable
)
)
))
# SERVER
server <- function(input, output) {
# Regression output
output$summary <- renderPrint({
fit <- lm(swiss[,input$outcome] ~ swiss[,input$indepvar])
names(fit$coefficients) <- c("Intercept", input$var2)
summary(fit)
})
# Data output
output$tbl = DT::renderDataTable({
DT::datatable(swiss, options = list(lengthChange = FALSE))
})
# Scatterplot output
output$scatterplot <- renderPlot({
plot(swiss[,input$indepvar], swiss[,input$outcome], main="Scatterplot",
xlab=input$indepvar, ylab=input$outcome, pch=19)
abline(lm(swiss[,input$outcome] ~ swiss[,input$indepvar]), col="red")
lines(lowess(swiss[,input$indepvar],swiss[,input$outcome]), col="blue")
}, height=400)
# Histogram output var 1
output$distribution1 <- renderPlot({
hist(swiss[,input$outcome], main="", xlab=input$outcome)
}, height=300, width=300)
# Histogram output var 2
output$distribution2 <- renderPlot({
hist(swiss[,input$indepvar], main="", xlab=input$indepvar)
}, height=300, width=300)
}
shinyApp(ui = ui, server = server)
install.packages("rsconnect")
rsconnect::setAccountInfo(name='jorgemontoya',
token='46589D94E8A8A709098E09E50AE16215',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jorgemontoya',
token='46589D94E8A8A709098E09E50AE16215',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jorgemontoya',
token='46589D94E8A8A709098E09E50AE16215',
secret='/eIZn+6k9WzXbY1zBU4hU7UzmyN7kiIsZgHVjGb8')
